......................
FAIL benchmarks,0,4
The expression: not_there || b
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: Unhandled expression: "_there || b"
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:165:10-79	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:24-52	thunk <tokens>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:329:7-13	thunk <arr>
	std.jsonnet:790:15-18	thunk <arr>
	std.jsonnet:786:28-31	
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:(327:5)-(331:6)	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:5-59	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:15-46	thunk <x>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:48	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:338:22-46	thunk <compiled>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:339:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,1,0
The expression: a && b && c && d && e && f && g && h && i && j && k && l && m && n && o && p && q && r && s && t && u && v && w && x && y && z
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: Unhandled expression: "&& b && c && d && e && f && g && h && i && j && k && l && m && n && o && p && q && r && s && t && u && v && w && x && y && z"
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:165:10-79	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:24-52	thunk <tokens>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:329:7-13	thunk <arr>
	std.jsonnet:790:15-18	thunk <arr>
	std.jsonnet:786:28-31	
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:(327:5)-(331:6)	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:5-59	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:15-46	thunk <x>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:48	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:338:22-46	thunk <compiled>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:339:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,1,1
The expression: z || y || x || w || v || u || t || s || r || q || p || o || n || m || l || k || j || i || h || g || f || e || d || c || b || a
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: max stack frames exceeded.
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:67:33-43	thunk <expression>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:181:18-28	thunk <expression>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:140:14-24	thunk <indexable>
	std.jsonnet:210:25-34	thunk <v>
	std.jsonnet:28:26	
	std.jsonnet:28:17-28	thunk <a>
	std.jsonnet:28:17-40	function <anonymous>
	std.jsonnet:28:17-40	function <anonymous>
	std.jsonnet:210:12-35	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:140:14-41	thunk <x>
	...
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:(327:5)-(331:6)	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:5-59	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:15-46	thunk <x>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:48	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:338:22-46	thunk <compiled>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:339:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,1,2
The expression: sum([z, y, x, w, v, u, t, s, r, q, p, o, n, m, l, k, j, i, h, g, f, e, d, c, b, a])
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: Unhandled expression: "([z, y, x, w, v, u, t, s, r, q, p, o, n, m, l, k, j, i, h, g, f, e, d, c, b, a])"
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:165:10-79	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:24-52	thunk <tokens>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:329:7-13	thunk <arr>
	std.jsonnet:790:15-18	thunk <arr>
	std.jsonnet:786:28-31	
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:(327:5)-(331:6)	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:5-59	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:15-46	thunk <x>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:48	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:338:22-46	thunk <compiled>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:339:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,1,3
The expression: sum([z, sum([y, sum([x, sum([w, sum([v, sum([u, sum([t, sum([s, sum([r, sum([q, sum([p, sum([o, sum([n, sum([m, sum([l, sum([k, sum([j, sum([i, sum([h, sum([g, sum([f, sum([e, sum([d, sum([c, sum([b, a])])])])])])])])])])])])])])])])])])])])])])])])])
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: Unhandled expression: "([z, sum([y, sum([x, sum([w, sum([v, sum([u, sum([t, sum([s, sum([r, sum([q, sum([p, sum([o, sum([n, sum([m, sum([l, sum([k, sum([j, sum([i, sum([h, sum([g, sum([f, sum([e, sum([d, sum([c, sum([b, a])])])])])])])])])])])])])])])])])])])])])])])])])"
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:165:10-79	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:24-52	thunk <tokens>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:329:7-13	thunk <arr>
	std.jsonnet:790:15-18	thunk <arr>
	std.jsonnet:786:28-31	
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:(327:5)-(331:6)	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:5-59	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:15-46	thunk <x>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:48	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:338:22-46	thunk <compiled>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:339:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,1,4
The expression: [z, y, x, w, v, u, t, s, r, q, p, o, n, m, l, k, j, i, h, g, f, e, d, c, b, a]
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: Unhandled expression: "[z, y, x, w, v, u, t, s, r, q, p, o, n, m, l, k, j, i, h, g, f, e, d, c, b, a]"
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:165:10-79	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:24-52	thunk <tokens>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:329:7-13	thunk <arr>
	std.jsonnet:790:15-18	thunk <arr>
	std.jsonnet:786:28-31	
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:(327:5)-(331:6)	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:5-59	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:15-46	thunk <x>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:48	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:338:22-46	thunk <compiled>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:339:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,2,0
The expression: j49.j48.j47.j46.j45.j44.j43.j42.j41.j40.j39.j38.j37.j36.j35.j34.j33.j32.j31.j30.j29.j28.j27.j26.j25.j24.j23.j22.j21.j20.j19.j18.j17.j16.j15.j14.j13.j12.j11.j10.j9.j8.j7.j6.j5.j4.j3.j2.j1.j0
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: max stack frames exceeded.
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:26:54-57	thunk <index>
	std.jsonnet:197:14-19	thunk <a>
	std.jsonnet:197:14-27	function <anonymous>
	std.jsonnet:197:14-27	object <invar>
	std.jsonnet:208:12-23	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:26:43-59	thunk <remainder>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:22:19-28	thunk <a>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	object <result>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:227:41-57	thunk <expression>
	...
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:(327:5)-(331:6)	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:5-59	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:15-46	thunk <x>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:48	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:338:22-46	thunk <compiled>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:339:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,2,1
The expression: j49|j48|j47|j46|j45|j44|j43|j42|j41|j40|j39|j38|j37|j36|j35|j34|j33|j32|j31|j30|j29|j28|j27|j26|j25|j24|j23|j22|j21|j20|j19|j18|j17|j16|j15|j14|j13|j12|j11|j10|j9|j8|j7|j6|j5|j4|j3|j2|j1|j0
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: max stack frames exceeded.
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:26:54-57	thunk <index>
	std.jsonnet:197:14-19	thunk <a>
	std.jsonnet:197:14-27	function <anonymous>
	std.jsonnet:197:14-27	object <invar>
	std.jsonnet:208:12-23	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:26:43-59	thunk <remainder>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:22:19-28	thunk <a>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	object <result>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:227:41-57	thunk <expression>
	...
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:(327:5)-(331:6)	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:5-59	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:15-46	thunk <x>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:48	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:338:22-46	thunk <compiled>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:339:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	

..
FAIL benchmarks,2,4
The expression: a[*].b[*].c[*].d[*].e[*].f[*].g[*].h[*].i[*].j[*].k[*].l[*].m[*].n[*].o[*].p[*].q[*].r[*].s[*].t[*].u[*].v[*].w[*].x[*].y[*].z[*].a[*].b[*].c[*].d[*].e[*].f[*].g[*].h[*].i[*].j[*].k[*].l[*].m[*].n[*].o[*].p[*].q[*].r[*].s[*].t[*].u[*].v[*].w[*].x[*].y[*].z[*].a[*].b[*].c[*].d[*].e[*].f[*].g[*].h[*].i[*].j[*].k[*].l[*].m[*].n[*].o[*].p[*].q[*].r[*].s[*].t[*].u[*].v[*].w[*].x[*].y[*].z[*].a[*].b[*].c[*].d[*].e[*].f[*].g[*].h[*].i[*].j[*].k[*].l[*].m[*].n[*].o[*].p[*].q[*].r[*].s[*].t[*].u[*].v[*].w[*].x[*].y[*].z[*]
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: max stack frames exceeded.
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:199:36-46	thunk <expression>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:189:31-41	thunk <expr>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:92:46-50	thunk <expression>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:71:47-57	thunk <expression>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:189:31-41	thunk <expression>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:142:26-36	thunk <expression>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:67:33-43	thunk <expression>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:181:18-28	thunk <expression>
	/home/abentley/jmespath-jsonnet/src/tokens.libsonnet:140:14-24	thunk <indexable>
	std.jsonnet:210:25-34	thunk <v>
	...
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:(327:5)-(331:6)	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:322:5-59	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:15-46	thunk <x>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:351:48	function <anonymous>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:338:22-46	thunk <compiled>
	/home/abentley/jmespath-jsonnet/src/jmespath.libsonnet:339:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	

.
FAIL boolean,0,0
The expression: outer.foo || outer.bar
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bar": "bar", "baz": "baz"}}
but instead gave: null

FAIL boolean,0,1
The expression: outer.foo||outer.bar
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bar": "bar", "baz": "baz"}}
but instead gave: null

FAIL boolean,0,2
The expression: outer.bar || outer.baz
was supposed to give: "bar"
for the JSON: {"outer": {"foo": "foo", "bar": "bar", "baz": "baz"}}
but instead gave: null

FAIL boolean,0,3
The expression: outer.bar||outer.baz
was supposed to give: "bar"
for the JSON: {"outer": {"foo": "foo", "bar": "bar", "baz": "baz"}}
but instead gave: null

FAIL boolean,0,4
The expression: outer.bad || outer.foo
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bar": "bar", "baz": "baz"}}
but instead gave: null

FAIL boolean,0,5
The expression: outer.bad||outer.foo
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bar": "bar", "baz": "baz"}}
but instead gave: null

FAIL boolean,0,6
The expression: outer.foo || outer.bad
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bar": "bar", "baz": "baz"}}
but instead gave: null

FAIL boolean,0,7
The expression: outer.foo||outer.bad
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bar": "bar", "baz": "baz"}}
but instead gave: null
..
FAIL boolean,1,0
The expression: outer.empty_string || outer.foo
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bool": false, "empty_list": [], "empty_string": ""}}
but instead gave: ""

FAIL boolean,1,1
The expression: outer.nokey || outer.bool || outer.empty_list || outer.empty_string || outer.foo
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bool": false, "empty_list": [], "empty_string": ""}}
but instead gave: ""

FAIL boolean,2,0
The expression: True && False
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,1
The expression: False && True
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,2
The expression: True && True
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,3
The expression: False && False
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,4
The expression: True && Number
was supposed to give: 5
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,5
The expression: Number && True
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,6
The expression: Number && False
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,7
The expression: Number && EmptyList
was supposed to give: []
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,8
The expression: Number && True
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,9
The expression: EmptyList && True
was supposed to give: []
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,10
The expression: EmptyList && False
was supposed to give: []
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,11
The expression: True || False
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: null

FAIL boolean,2,12
The expression: True || True
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: null

FAIL boolean,2,13
The expression: False || True
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: null

FAIL boolean,2,14
The expression: False || False
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: null

FAIL boolean,2,15
The expression: Number || EmptyList
was supposed to give: 5
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: null

FAIL boolean,2,16
The expression: Number || True
was supposed to give: 5
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: null

FAIL boolean,2,17
The expression: Number || True && False
was supposed to give: 5
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,18
The expression: (Number || True) && False
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,19
The expression: Number || (True && False)
was supposed to give: 5
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,20
The expression: !True
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,21
The expression: !False
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,22
The expression: !Number
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,23
The expression: !EmptyList
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,24
The expression: True && !False
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,25
The expression: True && !EmptyList
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,26
The expression: !False && !EmptyList
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,27
The expression: !True && False
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,28
The expression: !(True && False)
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,29
The expression: !Zero
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,30
The expression: !!Zero
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,31
The expression: Zero || Number
was supposed to give: 0
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: null

FAIL boolean,2,32
The expression: ZeroFloat || Number
was supposed to give: 0.0
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: null
.......
FAIL boolean,3,7
The expression: emptylist < one
was supposed to give: null
for the JSON: {"one": 1, "two": 2, "three": 3, "emptylist": [], "boolvalue": false}
but instead gave: false

FAIL boolean,3,8
The expression: emptylist < nullvalue
was supposed to give: null
for the JSON: {"one": 1, "two": 2, "three": 3, "emptylist": [], "boolvalue": false}
but instead gave: false

FAIL boolean,3,9
The expression: emptylist < boolvalue
was supposed to give: null
for the JSON: {"one": 1, "two": 2, "three": 3, "emptylist": [], "boolvalue": false}
but instead gave: false

FAIL boolean,3,10
The expression: one < boolvalue
was supposed to give: null
for the JSON: {"one": 1, "two": 2, "three": 3, "emptylist": [], "boolvalue": false}
but instead gave: false

FAIL boolean,3,11
The expression: one < two && three > one
was supposed to give: true
for the JSON: {"one": 1, "two": 2, "three": 3, "emptylist": [], "boolvalue": false}
but instead gave: ""

FAIL boolean,3,12
The expression: one < two || three > one
was supposed to give: true
for the JSON: {"one": 1, "two": 2, "three": 3, "emptylist": [], "boolvalue": false}
but instead gave: false

FAIL boolean,3,13
The expression: one < two || three < one
was supposed to give: true
for the JSON: {"one": 1, "two": 2, "three": 3, "emptylist": [], "boolvalue": false}
but instead gave: false
.
FAIL current,0,0
The expression: @
was supposed to give: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: ""

FAIL current,0,1
The expression: @.bar
was supposed to give: {"baz": "qux"}
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: ""

FAIL current,0,2
The expression: @.foo[0]
was supposed to give: {"name": "a"}
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: ""
..
FAIL escape,0,2
The expression: "foo\nbar"
was supposed to give: "newline"
for the JSON: {"foo.bar": "dot", "foo bar": "space", "foo\nbar": "newline", "foo\"bar": "doublequote", "c:\\\\windows\\path": "windows", "/unix/path": "unix", "\"\"\"": "threequotes", "bar": {"baz": "qux"}}
but instead gave: null

FAIL escape,0,3
The expression: "foo\"bar"
was supposed to give: "doublequote"
for the JSON: {"foo.bar": "dot", "foo bar": "space", "foo\nbar": "newline", "foo\"bar": "doublequote", "c:\\\\windows\\path": "windows", "/unix/path": "unix", "\"\"\"": "threequotes", "bar": {"baz": "qux"}}
but instead gave: ""

FAIL escape,0,4
The expression: "c:\\\\windows\\path"
was supposed to give: "windows"
for the JSON: {"foo.bar": "dot", "foo bar": "space", "foo\nbar": "newline", "foo\"bar": "doublequote", "c:\\\\windows\\path": "windows", "/unix/path": "unix", "\"\"\"": "threequotes", "bar": {"baz": "qux"}}
but instead gave: null
.
FAIL escape,0,6
The expression: "\"\"\""
was supposed to give: "threequotes"
for the JSON: {"foo.bar": "dot", "foo bar": "space", "foo\nbar": "newline", "foo\"bar": "doublequote", "c:\\\\windows\\path": "windows", "/unix/path": "unix", "\"\"\"": "threequotes", "bar": {"baz": "qux"}}
but instead gave: ""
.
FAIL filters,0,0
The expression: foo[?name == 'a']
was supposed to give: [{"name": "a"}]
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}]}
but instead gave: ""

FAIL filters,1,0
The expression: *[?[0] == `0`]
was supposed to give: [[], []]
for the JSON: {"foo": [0, 1], "bar": [2, 3]}
but instead gave: ""

FAIL filters,2,0
The expression: foo[?first == last]
was supposed to give: [{"first": "foo", "last": "foo"}]
for the JSON: {"foo": [{"first": "foo", "last": "bar"}, {"first": "foo", "last": "foo"}, {"first": "foo", "last": "baz"}]}
but instead gave: ""

FAIL filters,2,1
The expression: foo[?first == last].first
was supposed to give: ["foo"]
for the JSON: {"foo": [{"first": "foo", "last": "bar"}, {"first": "foo", "last": "foo"}, {"first": "foo", "last": "baz"}]}
but instead gave: ""

FAIL filters,3,0
The expression: foo[?age > `25`]
was supposed to give: [{"age": 30}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,1
The expression: foo[?age >= `25`]
was supposed to give: [{"age": 25}, {"age": 30}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,2
The expression: foo[?age > `30`]
was supposed to give: []
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,3
The expression: foo[?age < `25`]
was supposed to give: [{"age": 20}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,4
The expression: foo[?age <= `25`]
was supposed to give: [{"age": 20}, {"age": 25}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,5
The expression: foo[?age < `20`]
was supposed to give: []
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,6
The expression: foo[?age == `20`]
was supposed to give: [{"age": 20}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,7
The expression: foo[?age != `20`]
was supposed to give: [{"age": 25}, {"age": 30}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,4,0
The expression: foo[?weight > `44.4`]
was supposed to give: [{"weight": 55.5}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,1
The expression: foo[?weight >= `44.4`]
was supposed to give: [{"weight": 44.4}, {"weight": 55.5}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,2
The expression: foo[?weight > `55.5`]
was supposed to give: []
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,3
The expression: foo[?weight < `44.4`]
was supposed to give: [{"weight": 33.3}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,4
The expression: foo[?weight <= `44.4`]
was supposed to give: [{"weight": 33.3}, {"weight": 44.4}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,5
The expression: foo[?weight < `33.3`]
was supposed to give: []
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,6
The expression: foo[?weight == `33.3`]
was supposed to give: [{"weight": 33.3}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,7
The expression: foo[?weight != `33.3`]
was supposed to give: [{"weight": 44.4}, {"weight": 55.5}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,5,0
The expression: foo[?top.name == 'a']
was supposed to give: [{"top": {"name": "a"}}]
for the JSON: {"foo": [{"top": {"name": "a"}}, {"top": {"name": "b"}}]}
but instead gave: ""

FAIL filters,6,0
The expression: foo[?top.first == top.last]
was supposed to give: [{"top": {"first": "foo", "last": "foo"}}]
for the JSON: {"foo": [{"top": {"first": "foo", "last": "bar"}}, {"top": {"first": "foo", "last": "foo"}}, {"top": {"first": "foo", "last": "baz"}}]}
but instead gave: ""

FAIL filters,6,1
The expression: foo[?top == `{"first": "foo", "last": "bar"}`]
was supposed to give: [{"top": {"first": "foo", "last": "bar"}}]
for the JSON: {"foo": [{"top": {"first": "foo", "last": "bar"}}, {"top": {"first": "foo", "last": "foo"}}, {"top": {"first": "foo", "last": "baz"}}]}
but instead gave: ""

FAIL filters,7,0
The expression: foo[?key == `true`]
was supposed to give: [{"key": true}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,1
The expression: foo[?key == `false`]
was supposed to give: [{"key": false}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,2
The expression: foo[?key == `0`]
was supposed to give: [{"key": 0}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,3
The expression: foo[?key == `1`]
was supposed to give: [{"key": 1}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,4
The expression: foo[?key == `[0]`]
was supposed to give: [{"key": [0]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,5
The expression: foo[?key == `{"bar": [0]}`]
was supposed to give: [{"key": {"bar": [0]}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,6
The expression: foo[?key == `null`]
was supposed to give: [{"key": null}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,7
The expression: foo[?key == `[1]`]
was supposed to give: [{"key": [1]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,8
The expression: foo[?key == `{"a":2}`]
was supposed to give: [{"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,9
The expression: foo[?`true` == key]
was supposed to give: [{"key": true}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,10
The expression: foo[?`false` == key]
was supposed to give: [{"key": false}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,11
The expression: foo[?`0` == key]
was supposed to give: [{"key": 0}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,12
The expression: foo[?`1` == key]
was supposed to give: [{"key": 1}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,13
The expression: foo[?`[0]` == key]
was supposed to give: [{"key": [0]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,14
The expression: foo[?`{"bar": [0]}` == key]
was supposed to give: [{"key": {"bar": [0]}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,15
The expression: foo[?`null` == key]
was supposed to give: [{"key": null}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,16
The expression: foo[?`[1]` == key]
was supposed to give: [{"key": [1]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,17
The expression: foo[?`{"a":2}` == key]
was supposed to give: [{"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,18
The expression: foo[?key != `true`]
was supposed to give: [{"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,19
The expression: foo[?key != `false`]
was supposed to give: [{"key": true}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,20
The expression: foo[?key != `0`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,21
The expression: foo[?key != `1`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,22
The expression: foo[?key != `null`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,23
The expression: foo[?key != `[1]`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,24
The expression: foo[?key != `{"a":2}`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,25
The expression: foo[?`true` != key]
was supposed to give: [{"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,26
The expression: foo[?`false` != key]
was supposed to give: [{"key": true}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,27
The expression: foo[?`0` != key]
was supposed to give: [{"key": true}, {"key": false}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,28
The expression: foo[?`1` != key]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,29
The expression: foo[?`null` != key]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,30
The expression: foo[?`[1]` != key]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,31
The expression: foo[?`{"a":2}` != key]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,0
The expression: foo[?key == `true`]
was supposed to give: [{"key": true}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,1
The expression: foo[?key == `false`]
was supposed to give: [{"key": false}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,2
The expression: foo[?key]
was supposed to give: [{"key": true}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,3
The expression: foo[? !key]
was supposed to give: [{"key": false}, {"key": null}, {"key": []}, {"key": {}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,4
The expression: foo[? !!key]
was supposed to give: [{"key": true}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,5
The expression: foo[? `true`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,6
The expression: foo[? `false`]
was supposed to give: []
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,9,0
The expression: reservations[].instances[?bar==`1`]
was supposed to give: [[{"foo": 2, "bar": 1}]]
for the JSON: {"reservations": [{"instances": [{"foo": 1, "bar": 2}, {"foo": 1, "bar": 3}, {"foo": 1, "bar": 2}, {"foo": 2, "bar": 1}]}]}
but instead gave: ""

FAIL filters,9,1
The expression: reservations[*].instances[?bar==`1`]
was supposed to give: [[{"foo": 2, "bar": 1}]]
for the JSON: {"reservations": [{"instances": [{"foo": 1, "bar": 2}, {"foo": 1, "bar": 3}, {"foo": 1, "bar": 2}, {"foo": 2, "bar": 1}]}]}
but instead gave: ""

FAIL filters,9,2
The expression: reservations[].instances[?bar==`1`][]
was supposed to give: [{"foo": 2, "bar": 1}]
for the JSON: {"reservations": [{"instances": [{"foo": 1, "bar": 2}, {"foo": 1, "bar": 3}, {"foo": 1, "bar": 2}, {"foo": 2, "bar": 1}]}]}
but instead gave: ""

FAIL filters,10,0
The expression: foo[?bar==`1`].bar[0]
was supposed to give: []
for the JSON: {"baz": "other", "foo": [{"bar": 1}, {"bar": 2}, {"bar": 3}, {"bar": 4}, {"bar": 1, "baz": 2}]}
but instead gave: ""

FAIL filters,11,0
The expression: foo[?a==`1`].b.c
was supposed to give: ["x", "y", "z"]
for the JSON: {"foo": [{"a": 1, "b": {"c": "x"}}, {"a": 1, "b": {"c": "y"}}, {"a": 1, "b": {"c": "z"}}, {"a": 2, "b": {"c": "z"}}, {"a": 1, "baz": 2}]}
but instead gave: ""

FAIL filters,12,0
The expression: foo[?name == 'a' || name == 'b']
was supposed to give: [{"name": "a"}, {"name": "b"}]
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}, {"name": "c"}]}
but instead gave: ""

FAIL filters,12,1
The expression: foo[?name == 'a' || name == 'e']
was supposed to give: [{"name": "a"}]
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}, {"name": "c"}]}
but instead gave: ""

FAIL filters,12,2
The expression: foo[?name == 'a' || name == 'b' || name == 'c']
was supposed to give: [{"name": "a"}, {"name": "b"}, {"name": "c"}]
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}, {"name": "c"}]}
but instead gave: ""

FAIL filters,13,0
The expression: foo[?a == `1` && b == `2`]
was supposed to give: [{"a": 1, "b": 2}]
for the JSON: {"foo": [{"a": 1, "b": 2}, {"a": 1, "b": 3}]}
but instead gave: ""

FAIL filters,13,1
The expression: foo[?a == `1` && b == `4`]
was supposed to give: []
for the JSON: {"foo": [{"a": 1, "b": 2}, {"a": 1, "b": 3}]}
but instead gave: ""

FAIL filters,14,0
The expression: foo[?c == `3` || a == `1` && b == `4`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,1
The expression: foo[?b == `2` || a == `3` && b == `4`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,2
The expression: foo[?a == `3` && b == `4` || b == `2`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,3
The expression: foo[?(a == `3` && b == `4`) || b == `2`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,4
The expression: foo[?((a == `3` && b == `4`)) || b == `2`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,5
The expression: foo[?a == `3` && (b == `4` || b == `2`)]
was supposed to give: [{"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,6
The expression: foo[?a == `3` && ((b == `4` || b == `2`))]
was supposed to give: [{"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,15,0
The expression: foo[?a == `1` || b ==`2` && c == `5`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,15,1
The expression: foo[?(a == `1` || b ==`2`) && c == `5`]
was supposed to give: []
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,15,2
The expression: foo[?!(a == `1` || b ==`2`)]
was supposed to give: [{"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,16,0
The expression: foo[?key]
was supposed to give: [{"key": true}, {"key": [0]}, {"key": {"a": "b"}}, {"key": 0}, {"key": 1}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": []}, {"key": {}}, {"key": [0]}, {"key": {"a": "b"}}, {"key": 0}, {"key": 1}, {"key": null}, {"notkey": true}]}
but instead gave: ""

FAIL filters,16,1
The expression: foo[?!key]
was supposed to give: [{"key": false}, {"key": []}, {"key": {}}, {"key": null}, {"notkey": true}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": []}, {"key": {}}, {"key": [0]}, {"key": {"a": "b"}}, {"key": 0}, {"key": 1}, {"key": null}, {"notkey": true}]}
but instead gave: ""

FAIL filters,16,2
The expression: foo[?key == `null`]
was supposed to give: [{"key": null}, {"notkey": true}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": []}, {"key": {}}, {"key": [0]}, {"key": {"a": "b"}}, {"key": 0}, {"key": 1}, {"key": null}, {"notkey": true}]}
but instead gave: ""

FAIL filters,17,0
The expression: foo[?@ < `5`]
was supposed to give: [0, 1, 2, 3, 4]
for the JSON: {"foo": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}
but instead gave: ""

FAIL filters,17,1
The expression: foo[?`5` > @]
was supposed to give: [0, 1, 2, 3, 4]
for the JSON: {"foo": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}
but instead gave: ""

FAIL filters,17,2
The expression: foo[?@ == @]
was supposed to give: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
for the JSON: {"foo": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}
but instead gave: ""

FAIL functions,0,0
The expression: abs(foo)
was supposed to give: 1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,1
The expression: abs(foo)
was supposed to give: 1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,3
The expression: abs(array[1])
was supposed to give: 3
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,4
The expression: abs(array[1])
was supposed to give: 3
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,6
The expression: abs(`-24`)
was supposed to give: 24
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,7
The expression: abs(`-24`)
was supposed to give: 24
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
...
FAIL functions,0,11
The expression: avg(numbers)
was supposed to give: 2.75
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.....
FAIL functions,0,17
The expression: avg(empty_list)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,18
The expression: ceil(`1.2`)
was supposed to give: 2
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,19
The expression: ceil(decimals[0])
was supposed to give: 2
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,20
The expression: ceil(decimals[1])
was supposed to give: 2
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,21
The expression: ceil(decimals[2])
was supposed to give: -1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,23
The expression: contains('abc', 'a')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,24
The expression: contains('abc', 'd')
was supposed to give: false
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,26
The expression: contains(strings, 'a')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,27
The expression: contains(decimals, `1.2`)
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,28
The expression: contains(decimals, `false`)
was supposed to give: false
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,29
The expression: ends_with(str, 'r')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,30
The expression: ends_with(str, 'tr')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,31
The expression: ends_with(str, 'Str')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,32
The expression: ends_with(str, 'SStr')
was supposed to give: false
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,33
The expression: ends_with(str, 'foo')
was supposed to give: false
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,35
The expression: floor(`1.2`)
was supposed to give: 1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,37
The expression: floor(decimals[0])
was supposed to give: 1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,38
The expression: floor(foo)
was supposed to give: -1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,40
The expression: length('abc')
was supposed to give: 3
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,41
The expression: length('✓foo')
was supposed to give: 4
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,42
The expression: length('')
was supposed to give: 0
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,43
The expression: length(@)
was supposed to give: 12
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,44
The expression: length(strings[0])
was supposed to give: 1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,45
The expression: length(str)
was supposed to give: 3
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,46
The expression: length(array)
was supposed to give: 6
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,47
The expression: length(objects)
was supposed to give: 2
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,50
The expression: length(strings[0])
was supposed to give: 1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,51
The expression: max(numbers)
was supposed to give: 5
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,52
The expression: max(decimals)
was supposed to give: 1.2
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,53
The expression: max(strings)
was supposed to give: "c"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,56
The expression: max(decimals)
was supposed to give: 1.2
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,57
The expression: max(empty_list)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,58
The expression: merge(`{}`)
was supposed to give: {}
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,59
The expression: merge(`{}`, `{}`)
was supposed to give: {}
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,60
The expression: merge(`{"a": 1}`, `{"b": 2}`)
was supposed to give: {"a": 1, "b": 2}
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,61
The expression: merge(`{"a": 1}`, `{"a": 2}`)
was supposed to give: {"a": 2}
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,62
The expression: merge(`{"a": 1, "b": 2}`, `{"a": 2, "c": 3}`, `{"d": 4}`)
was supposed to give: {"a": 2, "b": 2, "c": 3, "d": 4}
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,63
The expression: min(numbers)
was supposed to give: -1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,64
The expression: min(decimals)
was supposed to give: -1.5
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,67
The expression: min(empty_list)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,68
The expression: min(decimals)
was supposed to give: -1.5
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,69
The expression: min(strings)
was supposed to give: "a"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,70
The expression: type('abc')
was supposed to give: "string"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,71
The expression: type(`1.0`)
was supposed to give: "number"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,72
The expression: type(`2`)
was supposed to give: "number"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,73
The expression: type(`true`)
was supposed to give: "boolean"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,74
The expression: type(`false`)
was supposed to give: "boolean"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,75
The expression: type(`null`)
was supposed to give: "null"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,76
The expression: type(`[0]`)
was supposed to give: "array"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,77
The expression: type(`{"a": "b"}`)
was supposed to give: "object"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,78
The expression: type(@)
was supposed to give: "object"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,79
The expression: sort(keys(objects))
was supposed to give: ["bar", "foo"]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
...
FAIL functions,0,83
The expression: sort(values(objects))
was supposed to give: ["bar", "baz"]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,84
The expression: keys(empty_hash)
was supposed to give: []
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,86
The expression: join(', ', strings)
was supposed to give: "a, b, c"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,87
The expression: join(', ', strings)
was supposed to give: "a, b, c"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,88
The expression: join(',', `["a", "b"]`)
was supposed to give: "a,b"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,91
The expression: join('|', strings)
was supposed to give: "a|b|c"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,94
The expression: join('|', decimals[].to_string(@))
was supposed to give: "1.01|1.2|-1.5"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,96
The expression: reverse(numbers)
was supposed to give: [5, 4, 3, -1]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,97
The expression: reverse(array)
was supposed to give: ["100", "a", 5, 4, 3, -1]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,98
The expression: reverse(`[]`)
was supposed to give: []
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,100
The expression: reverse('hello world')
was supposed to give: "dlrow olleh"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,101
The expression: starts_with(str, 'S')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,102
The expression: starts_with(str, 'St')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,103
The expression: starts_with(str, 'Str')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,104
The expression: starts_with(str, 'String')
was supposed to give: false
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,106
The expression: sum(numbers)
was supposed to give: 11
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,107
The expression: sum(decimals)
was supposed to give: 0.71
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,109
The expression: sum(array[].to_number(@))
was supposed to give: 111
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,110
The expression: sum(`[]`)
was supposed to give: 0
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,111
The expression: to_array('foo')
was supposed to give: ["foo"]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,112
The expression: to_array(`0`)
was supposed to give: [0]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,113
The expression: to_array(objects)
was supposed to give: [{"foo": "bar", "bar": "baz"}]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,114
The expression: to_array(`[1, 2, 3]`)
was supposed to give: [1, 2, 3]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,115
The expression: to_array(false)
was supposed to give: [false]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,116
The expression: to_string('foo')
was supposed to give: "foo"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,117
The expression: to_string(`1.2`)
was supposed to give: "1.2"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,118
The expression: to_string(`[0, 1]`)
was supposed to give: "[0,1]"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,119
The expression: to_number('1.0')
was supposed to give: 1.0
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,120
The expression: to_number('1e21')
was supposed to give: 1e+21
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,121
The expression: to_number('1.1')
was supposed to give: 1.1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,122
The expression: to_number('4')
was supposed to give: 4
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,123
The expression: to_number('notanumber')
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,124
The expression: to_number(`false`)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,125
The expression: to_number(`null`)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,126
The expression: to_number(`[0]`)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,127
The expression: to_number(`{"foo": 0}`)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,129
The expression: sort(numbers)
was supposed to give: [-1, 3, 4, 5]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,130
The expression: sort(strings)
was supposed to give: ["a", "b", "c"]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,131
The expression: sort(decimals)
was supposed to give: [-1.5, 1.01, 1.2]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,134
The expression: sort(empty_list)
was supposed to give: []
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,136
The expression: not_null(unknown_key, str)
was supposed to give: "Str"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,137
The expression: not_null(unknown_key, foo.bar, empty_list, str)
was supposed to give: []
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,138
The expression: not_null(unknown_key, null_key, empty_list, str)
was supposed to give: []
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,139
The expression: not_null(all, expressions, are_null)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,141
The expression: numbers[].to_string(@)
was supposed to give: ["-1", "3", "4", "5"]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,142
The expression: array[].to_number(@)
was supposed to give: [-1, 3, 4, 5, 100]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,1,0
The expression: foo[].not_null(f, e, d, c, b, a)
was supposed to give: ["b", "c", "d", "e", "f"]
for the JSON: {"foo": [{"b": "b", "a": "a"}, {"c": "c", "b": "b"}, {"d": "d", "c": "c"}, {"e": "e", "d": "d"}, {"f": "f", "e": "e"}]}
but instead gave: ""

FAIL functions,2,0
The expression: sort_by(people, &age)
was supposed to give: [{"age": 10, "age_str": "10", "bool": true, "name": 3}, {"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}]
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,1
The expression: sort_by(people, &age_str)
was supposed to give: [{"age": 10, "age_str": "10", "bool": true, "name": 3}, {"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}]
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,2
The expression: sort_by(people, &to_number(age_str))
was supposed to give: [{"age": 10, "age_str": "10", "bool": true, "name": 3}, {"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}]
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,3
The expression: sort_by(people, &age)[].name
was supposed to give: [3, "a", "c", "b", "d"]
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""
....
FAIL functions,2,8
The expression: sort_by(people, &age)[].extra
was supposed to give: ["foo", "bar"]
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,9
The expression: sort_by(`[]`, &age)
was supposed to give: []
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,10
The expression: max_by(people, &age)
was supposed to give: {"age": 50, "age_str": "50", "bool": false, "name": "d"}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,11
The expression: max_by(people, &age_str)
was supposed to give: {"age": 50, "age_str": "50", "bool": false, "name": "d"}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""
..
FAIL functions,2,14
The expression: max_by(people, &to_number(age_str))
was supposed to give: {"age": 50, "age_str": "50", "bool": false, "name": "d"}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,15
The expression: max_by(`[]`, &age)
was supposed to give: null
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,16
The expression: min_by(people, &age)
was supposed to give: {"age": 10, "age_str": "10", "bool": true, "name": 3}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,17
The expression: min_by(people, &age_str)
was supposed to give: {"age": 10, "age_str": "10", "bool": true, "name": 3}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""
..
FAIL functions,2,20
The expression: min_by(people, &to_number(age_str))
was supposed to give: {"age": 10, "age_str": "10", "bool": true, "name": 3}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,21
The expression: min_by(`[]`, &age)
was supposed to give: null
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,3,0
The expression: sort_by(people, &age)
was supposed to give: [{"age": 10, "order": "1"}, {"age": 10, "order": "2"}, {"age": 10, "order": "3"}, {"age": 10, "order": "4"}, {"age": 10, "order": "5"}, {"age": 10, "order": "6"}, {"age": 10, "order": "7"}, {"age": 10, "order": "8"}, {"age": 10, "order": "9"}, {"age": 10, "order": "10"}, {"age": 10, "order": "11"}]
for the JSON: {"people": [{"age": 10, "order": "1"}, {"age": 10, "order": "2"}, {"age": 10, "order": "3"}, {"age": 10, "order": "4"}, {"age": 10, "order": "5"}, {"age": 10, "order": "6"}, {"age": 10, "order": "7"}, {"age": 10, "order": "8"}, {"age": 10, "order": "9"}, {"age": 10, "order": "10"}, {"age": 10, "order": "11"}]}
but instead gave: ""

FAIL functions,4,0
The expression: map(&a, people)
was supposed to give: [10, 10, 10, 10, 10, 10, 10, 10, 10]
for the JSON: {"people": [{"a": 10, "b": 1, "c": "z"}, {"a": 10, "b": 2, "c": null}, {"a": 10, "b": 3}, {"a": 10, "b": 4, "c": "z"}, {"a": 10, "b": 5, "c": null}, {"a": 10, "b": 6}, {"a": 10, "b": 7, "c": "z"}, {"a": 10, "b": 8, "c": null}, {"a": 10, "b": 9}], "empty": []}
but instead gave: ""

FAIL functions,4,1
The expression: map(&c, people)
was supposed to give: ["z", null, null, "z", null, null, "z", null, null]
for the JSON: {"people": [{"a": 10, "b": 1, "c": "z"}, {"a": 10, "b": 2, "c": null}, {"a": 10, "b": 3}, {"a": 10, "b": 4, "c": "z"}, {"a": 10, "b": 5, "c": null}, {"a": 10, "b": 6}, {"a": 10, "b": 7, "c": "z"}, {"a": 10, "b": 8, "c": null}, {"a": 10, "b": 9}], "empty": []}
but instead gave: ""
.
FAIL functions,4,3
The expression: map(&foo, empty)
was supposed to give: []
for the JSON: {"people": [{"a": 10, "b": 1, "c": "z"}, {"a": 10, "b": 2, "c": null}, {"a": 10, "b": 3}, {"a": 10, "b": 4, "c": "z"}, {"a": 10, "b": 5, "c": null}, {"a": 10, "b": 6}, {"a": 10, "b": 7, "c": "z"}, {"a": 10, "b": 8, "c": null}, {"a": 10, "b": 9}], "empty": []}
but instead gave: ""

FAIL functions,5,0
The expression: map(&foo.bar, array)
was supposed to give: ["yes1", "yes2", null]
for the JSON: {"array": [{"foo": {"bar": "yes1"}}, {"foo": {"bar": "yes2"}}, {"foo1": {"bar": "no"}}]}
but instead gave: ""

FAIL functions,5,1
The expression: map(&foo1.bar, array)
was supposed to give: [null, null, "no"]
for the JSON: {"array": [{"foo": {"bar": "yes1"}}, {"foo": {"bar": "yes2"}}, {"foo1": {"bar": "no"}}]}
but instead gave: ""

FAIL functions,5,2
The expression: map(&foo.bar.baz, array)
was supposed to give: [null, null, null]
for the JSON: {"array": [{"foo": {"bar": "yes1"}}, {"foo": {"bar": "yes2"}}, {"foo1": {"bar": "no"}}]}
but instead gave: ""

FAIL functions,6,0
The expression: map(&[], array)
was supposed to give: [[1, 2, 3, 4], [5, 6, 7, 8, 9]]
for the JSON: {"array": [[1, 2, 3, [4]], [5, 6, 7, [8, 9]]]}
but instead gave: ""

FAIL identifiers,0,0
The expression: __L
was supposed to give: true
for the JSON: {"__L": true}
but instead gave: ""

FAIL identifiers,1,0
The expression: "!\r"
was supposed to give: true
for the JSON: {"!\r": true}
but instead gave: null

FAIL identifiers,2,0
The expression: Y_1623
was supposed to give: true
for the JSON: {"Y_1623": true}
but instead gave: ""
.
FAIL identifiers,4,0
The expression: "\tF\uCebb"
was supposed to give: true
for the JSON: {"\tF\ucebb": true}
but instead gave: null

FAIL identifiers,5,0
The expression: " \t"
was supposed to give: true
for the JSON: {" \t": true}
but instead gave: null
..
FAIL identifiers,8,0
The expression: "\t"
was supposed to give: true
for the JSON: {"\t": true}
but instead gave: null

FAIL identifiers,9,0
The expression: _X
was supposed to give: true
for the JSON: {"_X": true}
but instead gave: ""

FAIL identifiers,10,0
The expression: "\t4\ud9da\udd15"
was supposed to give: true
for the JSON: {"\t4\ud9da\udd15": true}
but instead gave: null

FAIL identifiers,11,0
The expression: v24_W
was supposed to give: true
for the JSON: {"v24_W": true}
but instead gave: ""
.
FAIL identifiers,13,0
The expression: "\f"
was supposed to give: true
for the JSON: {"\f": true}
but instead gave: null
.....
FAIL identifiers,19,0
The expression: _6W
was supposed to give: true
for the JSON: {"_6W": true}
but instead gave: ""

FAIL identifiers,20,0
The expression: "\uaBA1\r"
was supposed to give: true
for the JSON: {"\uaba1\r": true}
but instead gave: null
.
FAIL identifiers,22,0
The expression: "<<U\t"
was supposed to give: true
for the JSON: {"<<U\t": true}
but instead gave: null

FAIL identifiers,23,0
The expression: "\ubBcE\ufAfB"
was supposed to give: true
for the JSON: {"\ubbce\ufafb": true}
but instead gave: null

FAIL identifiers,24,0
The expression: sNA_
was supposed to give: true
for the JSON: {"sNA_": true}
but instead gave: ""
.
FAIL identifiers,26,0
The expression: "\\\b\ud8cb\udc83"
was supposed to give: true
for the JSON: {"\\\b\ud8cb\udc83": true}
but instead gave: null
..
FAIL identifiers,29,0
The expression: _Q__7GL8
was supposed to give: true
for the JSON: {"_Q__7GL8": true}
but instead gave: ""

FAIL identifiers,30,0
The expression: "\\"
was supposed to give: true
for the JSON: {"\\": true}
but instead gave: null

FAIL identifiers,31,0
The expression: RR9_
was supposed to give: true
for the JSON: {"RR9_": true}
but instead gave: ""

FAIL identifiers,32,0
The expression: "\r\f:"
was supposed to give: true
for the JSON: {"\r\f:": true}
but instead gave: null
...
FAIL identifiers,36,0
The expression: __
was supposed to give: true
for the JSON: {"__": true}
but instead gave: ""

FAIL identifiers,37,0
The expression: "\b\t"
was supposed to give: true
for the JSON: {"\b\t": true}
but instead gave: null

FAIL identifiers,38,0
The expression: O_
was supposed to give: true
for the JSON: {"O_": true}
but instead gave: ""

FAIL identifiers,39,0
The expression: _r_8
was supposed to give: true
for the JSON: {"_r_8": true}
but instead gave: ""

FAIL identifiers,40,0
The expression: _j
was supposed to give: true
for the JSON: {"_j": true}
but instead gave: ""
.
FAIL identifiers,42,0
The expression: "\rB"
was supposed to give: true
for the JSON: {"\rB": true}
but instead gave: null
.
FAIL identifiers,44,0
The expression: "\n"
was supposed to give: true
for the JSON: {"\n": true}
but instead gave: null

FAIL identifiers,45,0
The expression: "\f󥌳"
was supposed to give: true
for the JSON: {"\f\udb54\udf33": true}
but instead gave: null

FAIL identifiers,46,0
The expression: "\\\u4FDc"
was supposed to give: true
for the JSON: {"\\\u4fdc": true}
but instead gave: null

FAIL identifiers,47,0
The expression: "\r"
was supposed to give: true
for the JSON: {"\r": true}
but instead gave: null

FAIL identifiers,48,0
The expression: m_
was supposed to give: true
for the JSON: {"m_": true}
but instead gave: ""

FAIL identifiers,49,0
The expression: "\r\fB "
was supposed to give: true
for the JSON: {"\r\fB ": true}
but instead gave: null

FAIL identifiers,50,0
The expression: "+\"\""
was supposed to give: true
for the JSON: {"+\"\"": true}
but instead gave: ""
.
FAIL identifiers,52,0
The expression: "\"!\/"
was supposed to give: true
for the JSON: {"\"!/": true}
but instead gave: ""

FAIL identifiers,53,0
The expression: "7\""
was supposed to give: true
for the JSON: {"7\"": true}
but instead gave: ""

FAIL identifiers,54,0
The expression: "\\󞢤S"
was supposed to give: true
for the JSON: {"\\\udb3a\udca4S": true}
but instead gave: null

FAIL identifiers,55,0
The expression: "\""
was supposed to give: true
for the JSON: {"\"": true}
but instead gave: ""
.
FAIL identifiers,57,0
The expression: "\b\b"
was supposed to give: true
for the JSON: {"\b\b": true}
but instead gave: null
....
FAIL identifiers,62,0
The expression: "!I\n\/"
was supposed to give: true
for the JSON: {"!I\n/": true}
but instead gave: null

FAIL identifiers,63,0
The expression: "\uEEbF"
was supposed to give: true
for the JSON: {"\ueebf": true}
but instead gave: null

FAIL identifiers,64,0
The expression: "U)\t"
was supposed to give: true
for the JSON: {"U)\t": true}
but instead gave: null

FAIL identifiers,65,0
The expression: fa0_9
was supposed to give: true
for the JSON: {"fa0_9": true}
but instead gave: ""
..
FAIL identifiers,68,0
The expression: "\b"
was supposed to give: true
for the JSON: {"\b": true}
but instead gave: null
.
FAIL identifiers,70,0
The expression: "\t"
was supposed to give: true
for the JSON: {"\t": true}
but instead gave: null

FAIL identifiers,71,0
The expression: "\t&\\\r"
was supposed to give: true
for the JSON: {"\t&\\\r": true}
but instead gave: null
.
FAIL identifiers,73,0
The expression: B__
was supposed to give: true
for the JSON: {"B__": true}
but instead gave: ""

FAIL identifiers,74,0
The expression: "\nS \n"
was supposed to give: true
for the JSON: {"\nS \n": true}
but instead gave: null
.
FAIL identifiers,76,0
The expression: ",\t;"
was supposed to give: true
for the JSON: {",\t;": true}
but instead gave: null

FAIL identifiers,77,0
The expression: B_q
was supposed to give: true
for the JSON: {"B_q": true}
but instead gave: ""

FAIL identifiers,78,0
The expression: "\/+\t\n\b!Z"
was supposed to give: true
for the JSON: {"/+\t\n\b!Z": true}
but instead gave: null

FAIL identifiers,79,0
The expression: "󇟇\\ueFAc"
was supposed to give: true
for the JSON: {"\udadd\udfc7\\ueFAc": true}
but instead gave: null

FAIL identifiers,80,0
The expression: ":\f"
was supposed to give: true
for the JSON: {":\f": true}
but instead gave: null

FAIL identifiers,81,0
The expression: "\/"
was supposed to give: true
for the JSON: {"/": true}
but instead gave: null

FAIL identifiers,82,0
The expression: _BW_6Hg_Gl
was supposed to give: true
for the JSON: {"_BW_6Hg_Gl": true}
but instead gave: ""

FAIL identifiers,83,0
The expression: "􃰂"
was supposed to give: true
for the JSON: {"\udbcf\udc02": true}
but instead gave: null
.
FAIL identifiers,85,0
The expression: __434
was supposed to give: true
for the JSON: {"__434": true}
but instead gave: ""

FAIL identifiers,86,0
The expression: "󵅁"
was supposed to give: true
for the JSON: {"\udb94\udd41": true}
but instead gave: null

FAIL identifiers,87,0
The expression: Z_5
was supposed to give: true
for the JSON: {"Z_5": true}
but instead gave: ""

FAIL identifiers,88,0
The expression: z_M_
was supposed to give: true
for the JSON: {"z_M_": true}
but instead gave: ""

FAIL identifiers,89,0
The expression: YU_2
was supposed to give: true
for the JSON: {"YU_2": true}
but instead gave: ""

FAIL identifiers,90,0
The expression: _0
was supposed to give: true
for the JSON: {"_0": true}
but instead gave: ""

FAIL identifiers,91,0
The expression: "\b+"
was supposed to give: true
for the JSON: {"\b+": true}
but instead gave: null

FAIL identifiers,92,0
The expression: "\""
was supposed to give: true
for the JSON: {"\"": true}
but instead gave: ""
.
FAIL identifiers,94,0
The expression: _62L
was supposed to give: true
for the JSON: {"_62L": true}
but instead gave: ""

FAIL identifiers,95,0
The expression: "\tK\t"
was supposed to give: true
for the JSON: {"\tK\t": true}
but instead gave: null

FAIL identifiers,96,0
The expression: "\n\\\f"
was supposed to give: true
for the JSON: {"\n\\\f": true}
but instead gave: null

FAIL identifiers,97,0
The expression: I_
was supposed to give: true
for the JSON: {"I_": true}
but instead gave: ""

FAIL identifiers,98,0
The expression: W_a0_
was supposed to give: true
for the JSON: {"W_a0_": true}
but instead gave: ""
.
FAIL identifiers,100,0
The expression: "\tX$\uABBb"
was supposed to give: true
for the JSON: {"\tX$\uabbb": true}
but instead gave: null
.
FAIL identifiers,102,0
The expression: "\b%\"򞄏"
was supposed to give: true
for the JSON: {"\b%\"\uda38\udd0f": true}
but instead gave: ""

FAIL identifiers,103,0
The expression: _F
was supposed to give: true
for the JSON: {"_F": true}
but instead gave: ""
.
FAIL identifiers,105,0
The expression: "\"!"
was supposed to give: true
for the JSON: {"\"!": true}
but instead gave: ""
..
FAIL identifiers,108,0
The expression: "9\r\\R"
was supposed to give: true
for the JSON: {"9\r\\R": true}
but instead gave: null

FAIL identifiers,109,0
The expression: M_k
was supposed to give: true
for the JSON: {"M_k": true}
but instead gave: ""

FAIL identifiers,110,0
The expression: "!\b\n󑩒\"\""
was supposed to give: true
for the JSON: {"!\b\n\udb06\ude52\"\"": true}
but instead gave: ""
.
FAIL identifiers,112,0
The expression: _7
was supposed to give: true
for the JSON: {"_7": true}
but instead gave: ""
.
FAIL identifiers,114,0
The expression: "\\8\\"
was supposed to give: true
for the JSON: {"\\8\\": true}
but instead gave: null
.....
FAIL identifiers,120,0
The expression: "VH2&H\\\/"
was supposed to give: true
for the JSON: {"VH2&H\\/": true}
but instead gave: null

FAIL identifiers,121,0
The expression: _C
was supposed to give: true
for the JSON: {"_C": true}
but instead gave: ""

FAIL identifiers,122,0
The expression: _
was supposed to give: true
for the JSON: {"_": true}
but instead gave: ""

FAIL identifiers,123,0
The expression: "<\t"
was supposed to give: true
for the JSON: {"<\t": true}
but instead gave: null

FAIL identifiers,124,0
The expression: "\uD834\uDD1E"
was supposed to give: true
for the JSON: {"\ud834\udd1e": true}
but instead gave: null
...
FAIL indices,0,3
The expression: foo.bar[3]
was supposed to give: null
for the JSON: {"foo": {"bar": ["zero", "one", "two"]}}
but instead gave: ""

FAIL indices,0,4
The expression: foo.bar[-1]
was supposed to give: "two"
for the JSON: {"foo": {"bar": ["zero", "one", "two"]}}
but instead gave: ""

FAIL indices,0,5
The expression: foo.bar[-2]
was supposed to give: "one"
for the JSON: {"foo": {"bar": ["zero", "one", "two"]}}
but instead gave: ""

FAIL indices,0,6
The expression: foo.bar[-3]
was supposed to give: "zero"
for the JSON: {"foo": {"bar": ["zero", "one", "two"]}}
but instead gave: ""

FAIL indices,0,7
The expression: foo.bar[-4]
was supposed to give: null
for the JSON: {"foo": {"bar": ["zero", "one", "two"]}}
but instead gave: ""
..........
FAIL indices,1,10
The expression: foo[4]
was supposed to give: null
for the JSON: {"foo": [{"bar": "one"}, {"bar": "two"}, {"bar": "three"}, {"notbar": "four"}]}
but instead gave: ""
...
FAIL indices,2,3
The expression: [-1]
was supposed to give: "three"
for the JSON: ["one", "two", "three"]
but instead gave: ""

FAIL indices,2,4
The expression: [-2]
was supposed to give: "two"
for the JSON: ["one", "two", "three"]
but instead gave: ""

FAIL indices,2,5
The expression: [-3]
was supposed to give: "one"
for the JSON: ["one", "two", "three"]
but instead gave: ""

FAIL indices,3,0
The expression: reservations[].instances[].foo
was supposed to give: [1, 2]
for the JSON: {"reservations": [{"instances": [{"foo": 1}, {"foo": 2}]}]}
but instead gave: [[1, 2]]

FAIL indices,3,1
The expression: reservations[].instances[].bar
was supposed to give: []
for the JSON: {"reservations": [{"instances": [{"foo": 1}, {"foo": 2}]}]}
but instead gave: [[]]
..
FAIL indices,4,0
The expression: reservations[].instances[].foo[].bar
was supposed to give: [1, 2, 4, 5, 6, 8]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[1, 2, 4], [5, 6, 8], []], []]

FAIL indices,4,1
The expression: reservations[].instances[].foo[].baz
was supposed to give: []
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[], [], []], []]

FAIL indices,4,2
The expression: reservations[].instances[].notfoo[].bar
was supposed to give: [20, 21, 22, 23, 24, 25]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[20, 21, 22]], [[23, 24, 25]]]

FAIL indices,4,3
The expression: reservations[].instances[].notfoo[].notbar
was supposed to give: [[7], [7]]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[[7]]], [[[7]]]]
.
FAIL indices,4,5
The expression: reservations[].instances[].foo[].notbar
was supposed to give: [3, [7]]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[3], [[7]], []], []]

FAIL indices,4,6
The expression: reservations[].instances[].bar[].baz
was supposed to give: [[1], [2], [3], [4]]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[[1], [2], [3], [4]]], []]

FAIL indices,4,7
The expression: reservations[].instances[].baz[].baz
was supposed to give: [[1, 2], [], [], [3, 4]]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[[1, 2], [], [], [3, 4]]], []]

FAIL indices,4,8
The expression: reservations[].instances[].qux[].baz
was supposed to give: [[], [1, 2, 3], [4], [], [], [1, 2, 3], [4], []]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[[], [1, 2, 3], [4], []]], [[[], [1, 2, 3], [4], []]]]

FAIL indices,4,9
The expression: reservations[].instances[].qux[].baz[]
was supposed to give: [1, 2, 3, 4, 1, 2, 3, 4]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[[], [1, 2, 3], [4], []]], [[[], [1, 2, 3], [4], []]]]
..
FAIL indices,5,2
The expression: foo[][1]
was supposed to give: ["two", "four", "six", "eight"]
for the JSON: {"foo": [[["one", "two"], ["three", "four"]], [["five", "six"], ["seven", "eight"]], [["nine"], ["ten"]]]}
but instead gave: ""
.
FAIL indices,5,4
The expression: foo[][2][2]
was supposed to give: []
for the JSON: {"foo": [[["one", "two"], ["three", "four"]], [["five", "six"], ["seven", "eight"]], [["nine"], ["ten"]]]}
but instead gave: ""
....
FAIL indices,6,3
The expression: foo[].bar[]
was supposed to give: [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}, {"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: [[{"baz": 1, "qux": 2}, {"baz": 3, "qux": 4}], [{"baz": 5, "qux": 6}, {"baz": 7, "qux": 8}]]

FAIL indices,6,4
The expression: foo[].bar[].baz
was supposed to give: [1, 3, 5, 7]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: [[1, 3], [5, 7]]

FAIL indices,7,0
The expression: string[]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ["s", "t", "r", "i", "n", "g"]

FAIL indices,7,1
The expression: hash[]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""

FAIL indices,7,2
The expression: number[]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""
.
FAIL indices,7,4
The expression: string[].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: []

FAIL indices,7,5
The expression: hash[].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""

FAIL indices,7,6
The expression: number[].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""
....................
FAIL literal,0,18
The expression: `"foo\`bar"`
was supposed to give: "foo`bar"
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: ""
.
FAIL literal,0,20
The expression: `"1\`"`
was supposed to give: "1`"
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: ""

FAIL literal,0,21
The expression: `"\\"`.{a:`"b"`}
was supposed to give: {"a": "b"}
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: ""

FAIL literal,0,22
The expression: `{"a": "b"}`.a
was supposed to give: "b"
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: {"a": "b"}

FAIL literal,0,23
The expression: `{"a": {"b": "c"}}`.a.b
was supposed to give: "c"
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: {"a": {"b": "c"}}

FAIL literal,0,24
The expression: `[0, 1, 2]`[1]
was supposed to give: 1
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: [0, 1, 2]
..
FAIL literal,1,2
The expression: foo.`"bar"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

...........
FAIL literal,2,10
The expression: 'foo\'bar'
was supposed to give: "foo'bar"
for the JSON: {}
but instead gave: ""
..
FAIL multiselect,0,0
The expression: foo.{bar: bar}
was supposed to give: {"bar": "bar"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,1
The expression: foo.{"bar": bar}
was supposed to give: {"bar": "bar"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,2
The expression: foo.{"foo.bar": bar}
was supposed to give: {"foo.bar": "bar"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,3
The expression: foo.{bar: bar, baz: baz}
was supposed to give: {"bar": "bar", "baz": "baz"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,4
The expression: foo.{"bar": bar, "baz": baz}
was supposed to give: {"bar": "bar", "baz": "baz"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,5
The expression: {"baz": baz, "qux\"": "qux\""}
was supposed to give: {"baz": 2, "qux\"": 3}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,6
The expression: foo.{bar:bar,baz:baz}
was supposed to give: {"bar": "bar", "baz": "baz"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,7
The expression: foo.{bar: bar,qux: qux}
was supposed to give: {"bar": "bar", "qux": "qux"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,8
The expression: foo.{bar: bar, noexist: noexist}
was supposed to give: {"bar": "bar", "noexist": null}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,9
The expression: foo.{noexist: noexist, alsonoexist: alsonoexist}
was supposed to give: {"noexist": null, "alsonoexist": null}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,10
The expression: foo.badkey.{nokey: nokey, alsonokey: alsonokey}
was supposed to give: null
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,11
The expression: foo.nested.*.{a: a,b: b}
was supposed to give: [{"a": "first", "b": "second"}, {"a": "first", "b": "second"}, {"a": "first", "b": "second"}]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,12
The expression: foo.nested.three.{a: a, cinner: c.inner}
was supposed to give: {"a": "first", "cinner": "third"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,13
The expression: foo.nested.three.{a: a, c: c.inner.bad.key}
was supposed to give: {"a": "first", "c": null}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,14
The expression: foo.{a: nested.one.a, b: nested.two.b}
was supposed to give: {"a": "first", "b": "second"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,15
The expression: {bar: bar, baz: baz}
was supposed to give: {"bar": 1, "baz": 2}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,16
The expression: {bar: bar}
was supposed to give: {"bar": 1}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,17
The expression: {otherkey: bar}
was supposed to give: {"otherkey": 1}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,18
The expression: {no: no, exist: exist}
was supposed to give: {"no": null, "exist": null}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,19
The expression: foo.[bar]
was supposed to give: ["bar"]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,20
The expression: foo.[bar,baz]
was supposed to give: ["bar", "baz"]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,21
The expression: foo.[bar,qux]
was supposed to give: ["bar", "qux"]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,22
The expression: foo.[bar,noexist]
was supposed to give: ["bar", null]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,23
The expression: foo.[noexist,alsonoexist]
was supposed to give: [null, null]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,1,0
The expression: foo.{bar:bar,baz:baz}
was supposed to give: {"bar": 1, "baz": [2, 3, 4]}
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,1,1
The expression: foo.[bar,baz[0]]
was supposed to give: [1, 2]
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,1,2
The expression: foo.[bar,baz[1]]
was supposed to give: [1, 3]
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,1,3
The expression: foo.[bar,baz[2]]
was supposed to give: [1, 4]
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,1,4
The expression: foo.[bar,baz[3]]
was supposed to give: [1, null]
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,1,5
The expression: foo.[bar[0],baz[3]]
was supposed to give: [null, null]
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,2,0
The expression: foo.{bar: bar, baz: baz}
was supposed to give: {"bar": 1, "baz": 2}
for the JSON: {"foo": {"bar": 1, "baz": 2}}
but instead gave: ""

FAIL multiselect,2,1
The expression: foo.[bar,baz]
was supposed to give: [1, 2]
for the JSON: {"foo": {"bar": 1, "baz": 2}}
but instead gave: ""

FAIL multiselect,3,0
The expression: foo.{bar: bar.baz[1],includeme: includeme}
was supposed to give: {"bar": {"common": "second", "two": 2}, "includeme": true}
for the JSON: {"foo": {"bar": {"baz": [{"common": "first", "one": 1}, {"common": "second", "two": 2}]}, "ignoreme": 1, "includeme": true}}
but instead gave: ""

FAIL multiselect,3,1
The expression: foo.{"bar.baz.two": bar.baz[1].two, includeme: includeme}
was supposed to give: {"bar.baz.two": 2, "includeme": true}
for the JSON: {"foo": {"bar": {"baz": [{"common": "first", "one": 1}, {"common": "second", "two": 2}]}, "ignoreme": 1, "includeme": true}}
but instead gave: ""

FAIL multiselect,3,2
The expression: foo.[includeme, bar.baz[*].common]
was supposed to give: [true, ["first", "second"]]
for the JSON: {"foo": {"bar": {"baz": [{"common": "first", "one": 1}, {"common": "second", "two": 2}]}, "ignoreme": 1, "includeme": true}}
but instead gave: ""

FAIL multiselect,3,3
The expression: foo.[includeme, bar.baz[*].none]
was supposed to give: [true, []]
for the JSON: {"foo": {"bar": {"baz": [{"common": "first", "one": 1}, {"common": "second", "two": 2}]}, "ignoreme": 1, "includeme": true}}
but instead gave: ""

FAIL multiselect,3,4
The expression: foo.[includeme, bar.baz[].common]
was supposed to give: [true, ["first", "second"]]
for the JSON: {"foo": {"bar": {"baz": [{"common": "first", "one": 1}, {"common": "second", "two": 2}]}, "ignoreme": 1, "includeme": true}}
but instead gave: ""

FAIL multiselect,4,0
The expression: reservations[*].instances[*].{id: id, name: name}
was supposed to give: [[{"id": "id1", "name": "first"}, {"id": "id2", "name": "second"}], [{"id": "id3", "name": "third"}, {"id": "id4", "name": "fourth"}]]
for the JSON: {"reservations": [{"instances": [{"id": "id1", "name": "first"}, {"id": "id2", "name": "second"}]}, {"instances": [{"id": "id3", "name": "third"}, {"id": "id4", "name": "fourth"}]}]}
but instead gave: ""

FAIL multiselect,4,1
The expression: reservations[].instances[].{id: id, name: name}
was supposed to give: [{"id": "id1", "name": "first"}, {"id": "id2", "name": "second"}, {"id": "id3", "name": "third"}, {"id": "id4", "name": "fourth"}]
for the JSON: {"reservations": [{"instances": [{"id": "id1", "name": "first"}, {"id": "id2", "name": "second"}]}, {"instances": [{"id": "id3", "name": "third"}, {"id": "id4", "name": "fourth"}]}]}
but instead gave: ""

FAIL multiselect,4,2
The expression: reservations[].instances[].[id, name]
was supposed to give: [["id1", "first"], ["id2", "second"], ["id3", "third"], ["id4", "fourth"]]
for the JSON: {"reservations": [{"instances": [{"id": "id1", "name": "first"}, {"id": "id2", "name": "second"}]}, {"instances": [{"id": "id3", "name": "third"}, {"id": "id4", "name": "fourth"}]}]}
but instead gave: ""
...
FAIL multiselect,5,3
The expression: foo[].bar[]
was supposed to give: [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}, {"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: [[{"baz": 1, "qux": 2}, {"baz": 3, "qux": 4}], [{"baz": 5, "qux": 6}, {"baz": 7, "qux": 8}]]

FAIL multiselect,5,4
The expression: foo[].bar[].[baz, qux]
was supposed to give: [[1, 2], [3, 4], [5, 6], [7, 8]]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: ""

FAIL multiselect,5,5
The expression: foo[].bar[].[baz]
was supposed to give: [[1], [3], [5], [7]]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: ""

FAIL multiselect,5,6
The expression: foo[].bar[].[baz, qux][]
was supposed to give: [1, 2, 3, 4, 5, 6, 7, 8]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: ""

FAIL multiselect,6,0
The expression: foo.[baz[*].bar, qux[0]]
was supposed to give: [["abc", "def"], "zero"]
for the JSON: {"foo": {"baz": [{"bar": "abc"}, {"bar": "def"}], "qux": ["zero"]}}
but instead gave: ""

FAIL multiselect,7,0
The expression: foo.[baz[*].[bar, boo], qux[0]]
was supposed to give: [[["a", "c"], ["d", "f"]], "zero"]
for the JSON: {"foo": {"baz": [{"bar": "a", "bam": "b", "boo": "c"}, {"bar": "d", "bam": "e", "boo": "f"}], "qux": ["zero"]}}
but instead gave: ""

FAIL multiselect,8,0
The expression: foo.[baz[*].not_there || baz[*].bar, qux[0]]
was supposed to give: [["a", "d"], "zero"]
for the JSON: {"foo": {"baz": [{"bar": "a", "bam": "b", "boo": "c"}, {"bar": "d", "bam": "e", "boo": "f"}], "qux": ["zero"]}}
but instead gave: ""

FAIL multiselect,9,0
The expression: [[*],*]
was supposed to give: [null, ["object"]]
for the JSON: {"type": "object"}
but instead gave: ""

FAIL multiselect,10,0
The expression: [[*]]
was supposed to give: [[]]
for the JSON: []
but instead gave: ""

FAIL multiselect,10,1
The expression: missing.{foo: bar}
was supposed to give: null
for the JSON: []
but instead gave: ""

FAIL pipe,0,0
The expression: foo.*.baz | [0]
was supposed to give: "subkey"
for the JSON: {"foo": {"bar": {"baz": "subkey"}, "other": {"baz": "subkey"}, "other2": {"baz": "subkey"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["a", "b", "c"]}}}
but instead gave: []

FAIL pipe,0,1
The expression: foo.*.baz | [1]
was supposed to give: "subkey"
for the JSON: {"foo": {"bar": {"baz": "subkey"}, "other": {"baz": "subkey"}, "other2": {"baz": "subkey"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["a", "b", "c"]}}}
but instead gave: []

FAIL pipe,0,2
The expression: foo.*.baz | [2]
was supposed to give: "subkey"
for the JSON: {"foo": {"bar": {"baz": "subkey"}, "other": {"baz": "subkey"}, "other2": {"baz": "subkey"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["a", "b", "c"]}}}
but instead gave: []
..
FAIL pipe,0,5
The expression: {"a": foo.bar, "b": foo.other} | *.baz
was supposed to give: ["subkey", "subkey"]
for the JSON: {"foo": {"bar": {"baz": "subkey"}, "other": {"baz": "subkey"}, "other2": {"baz": "subkey"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["a", "b", "c"]}}}
but instead gave: ""
...
FAIL pipe,1,3
The expression: not_there | [0]
was supposed to give: null
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: ""

FAIL pipe,1,4
The expression: not_there | [0]
was supposed to give: null
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: ""

FAIL pipe,1,5
The expression: [foo.bar, foo.other] | [0]
was supposed to give: {"baz": "one"}
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: ""

FAIL pipe,1,6
The expression: {"a": foo.bar, "b": foo.other} | a
was supposed to give: {"baz": "one"}
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: ""

FAIL pipe,1,7
The expression: {"a": foo.bar, "b": foo.other} | b
was supposed to give: {"baz": "two"}
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: ""

FAIL pipe,1,8
The expression: foo.bam || foo.bar | baz
was supposed to give: "one"
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: null

FAIL pipe,1,9
The expression: foo | not_there || bar
was supposed to give: {"baz": "one"}
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: ""

FAIL pipe,2,0
The expression: foo[*].bar[*] | [0][0]
was supposed to give: {"baz": "one"}
for the JSON: {"foo": [{"bar": [{"baz": "one"}, {"baz": "two"}]}, {"bar": [{"baz": "three"}, {"baz": "four"}]}]}
but instead gave: []
...............................................
FAIL syntax,0,6
The expression: foo..bar
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

...............................
FAIL syntax,5,8
The expression: foo[*]*
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,6,0
The expression: []
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
.
FAIL syntax,7,1
The expression: [*]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: {"type": "object"}

FAIL syntax,7,2
The expression: *.[0]
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,7,3
The expression: *.["0"]
was supposed to give: [[null]]
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,7,4
The expression: [*].bar
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,7,5
The expression: [*][0]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
........
FAIL syntax,9,2
The expression: foo.[0]
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

..........
FAIL syntax,9,12
The expression: foo.[abc]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,9,13
The expression: foo.[abc, def]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
..................
FAIL syntax,10,14
The expression: a.{foo: bar}
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,10,15
The expression: a.{foo: bar, baz: bam}
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
....
FAIL syntax,10,20
The expression: {"\\":{" ":*}}
was supposed to give: {"\\": {" ": ["object"]}}
for the JSON: {"type": "object"}
but instead gave: ""
...
FAIL syntax,11,2
The expression: foo.|| bar
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,11,3
The expression:  || foo
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,11,4
The expression: foo || || foo
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,11,5
The expression: foo.[a || b]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
..
FAIL syntax,12,0
The expression: foo[?bar==`"baz"`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,12,1
The expression: foo[? bar == `"baz"` ]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
.....
FAIL syntax,12,7
The expression: foo[?a.b.c==d.e.f]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,12,8
The expression: foo[?bar==`[0, 1, 2]`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,12,9
The expression: foo[?bar==`["a", "b", "c"]`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
.
FAIL syntax,12,11
The expression: foo[?bar==`["foo\`bar"]`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
...
FAIL syntax,12,15
The expression: [?"\\">`"foo"`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,12,16
The expression: [?"\\" > `"foo"`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,13,0
The expression: bar.`"anything"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,1
The expression: bar.baz.noexists.`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,2
The expression: foo[*].`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,3
The expression: foo[*].name.`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,4
The expression: foo[].name.`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,5
The expression: foo[].name.`"literal"`.`"subliteral"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,6
The expression: foo[*].name.noexist.`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,7
The expression: foo[].name.noexist.`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,8
The expression: twolen[*].`"foo"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,9
The expression: twolen[*].threelen[*].`"bar"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,10
The expression: twolen[].threelen[].`"bar"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.....
FAIL syntax,14,3
The expression: "\u"
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

..
FAIL syntax,15,1
The expression: *[]||[*]
was supposed to give: []
for the JSON: []
but instead gave: null

FAIL syntax,15,2
The expression: [*.*]
was supposed to give: [null]
for the JSON: []
but instead gave: ""
........
FAIL wildcard,0,4
The expression: foo.*.notbaz[-1]
was supposed to give: ["c", "c"]
for the JSON: {"foo": {"bar": {"baz": "val"}, "other": {"baz": "val"}, "other2": {"baz": "val"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["a", "b", "c"]}, "other5": {"other": {"a": 1, "b": 1, "c": 1}}}}
but instead gave: ""
........
FAIL wildcard,3,3
The expression: *.*.foo[]
was supposed to give: ["one", "one"]
for the JSON: {"top1": {"sub1": {"foo": "one"}}, "top2": {"sub1": {"foo": "one"}}}
but instead gave: [[["o", "n", "e"]], [["o", "n", "e"]]]
..........
FAIL wildcard,6,4
The expression: foo.bar[*].baz[3]
was supposed to give: []
for the JSON: {"foo": {"bar": [{"baz": ["one", "two", "three"]}, {"baz": ["four", "five", "six"]}, {"baz": ["seven", "eight", "nine"]}]}}
but instead gave: ""
......
FAIL wildcard,8,0
The expression: foo[*].bar[*].kind
was supposed to give: [["basic", "intermediate"], ["advanced", "expert"]]
for the JSON: {"foo": [{"bar": [{"kind": "basic"}, {"kind": "intermediate"}]}, {"bar": [{"kind": "advanced"}, {"kind": "expert"}]}, {"bar": "string"}]}
but instead gave: ""
...
FAIL wildcard,10,1
The expression: foo[*].bar[1]
was supposed to give: ["two", "four"]
for the JSON: {"foo": [{"bar": ["one", "two"]}, {"bar": ["three", "four"]}, {"bar": ["five"]}]}
but instead gave: ""

FAIL wildcard,10,2
The expression: foo[*].bar[2]
was supposed to give: []
for the JSON: {"foo": [{"bar": ["one", "two"]}, {"bar": ["three", "four"]}, {"bar": ["five"]}]}
but instead gave: ""

FAIL wildcard,11,0
The expression: foo[*].bar[0]
was supposed to give: []
for the JSON: {"foo": [{"bar": []}, {"bar": []}, {"bar": []}]}
but instead gave: ""
.
FAIL wildcard,12,1
The expression: foo[*][1]
was supposed to give: ["two", "four"]
for the JSON: {"foo": [["one", "two"], ["three", "four"], ["five"]]}
but instead gave: ""
....
FAIL wildcard,13,4
The expression: foo[*][0][1]
was supposed to give: ["two", "six"]
for the JSON: {"foo": [[["one", "two"], ["three", "four"]], [["five", "six"], ["seven", "eight"]], [["nine"], ["ten"]]]}
but instead gave: ""

FAIL wildcard,13,5
The expression: foo[*][1][1]
was supposed to give: ["four", "eight"]
for the JSON: {"foo": [[["one", "two"], ["three", "four"]], [["five", "six"], ["seven", "eight"]], [["nine"], ["ten"]]]}
but instead gave: ""

FAIL wildcard,13,6
The expression: foo[*][2]
was supposed to give: []
for the JSON: {"foo": [[["one", "two"], ["three", "four"]], [["five", "six"], ["seven", "eight"]], [["nine"], ["ten"]]]}
but instead gave: ""

FAIL wildcard,13,7
The expression: foo[*][2][2]
was supposed to give: []
for the JSON: {"foo": [[["one", "two"], ["three", "four"]], [["five", "six"], ["seven", "eight"]], [["nine"], ["ten"]]]}
but instead gave: ""
..
FAIL wildcard,14,0
The expression: string[*]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: "string"

FAIL wildcard,14,1
The expression: hash[*]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: {"bar": "baz", "foo": "bar"}

FAIL wildcard,14,2
The expression: number[*]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: 23
.
FAIL wildcard,14,4
The expression: string[*].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""

FAIL wildcard,14,5
The expression: hash[*].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""

FAIL wildcard,14,6
The expression: number[*].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""
........
FAIL
