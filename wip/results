
FAIL multiselect,0,0
The expression: foo.{bar: bar}
was supposed to give: {"bar": "bar"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,1
The expression: foo.{"bar": bar}
was supposed to give: {"bar": "bar"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,2
The expression: foo.{"foo.bar": bar}
was supposed to give: {"foo.bar": "bar"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,3
The expression: foo.{bar: bar, baz: baz}
was supposed to give: {"bar": "bar", "baz": "baz"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,4
The expression: foo.{"bar": bar, "baz": baz}
was supposed to give: {"bar": "bar", "baz": "baz"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,5
The expression: {"baz": baz, "qux\"": "qux\""}
was supposed to give: {"baz": 2, "qux\"": 3}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,6
The expression: foo.{bar:bar,baz:baz}
was supposed to give: {"bar": "bar", "baz": "baz"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,7
The expression: foo.{bar: bar,qux: qux}
was supposed to give: {"bar": "bar", "qux": "qux"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,8
The expression: foo.{bar: bar, noexist: noexist}
was supposed to give: {"bar": "bar", "noexist": null}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,9
The expression: foo.{noexist: noexist, alsonoexist: alsonoexist}
was supposed to give: {"noexist": null, "alsonoexist": null}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,10
The expression: foo.badkey.{nokey: nokey, alsonokey: alsonokey}
was supposed to give: null
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,11
The expression: foo.nested.*.{a: a,b: b}
was supposed to give: [{"a": "first", "b": "second"}, {"a": "first", "b": "second"}, {"a": "first", "b": "second"}]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,12
The expression: foo.nested.three.{a: a, cinner: c.inner}
was supposed to give: {"a": "first", "cinner": "third"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,13
The expression: foo.nested.three.{a: a, c: c.inner.bad.key}
was supposed to give: {"a": "first", "c": null}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,14
The expression: foo.{a: nested.one.a, b: nested.two.b}
was supposed to give: {"a": "first", "b": "second"}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,15
The expression: {bar: bar, baz: baz}
was supposed to give: {"bar": 1, "baz": 2}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,16
The expression: {bar: bar}
was supposed to give: {"bar": 1}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,17
The expression: {otherkey: bar}
was supposed to give: {"otherkey": 1}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,18
The expression: {no: no, exist: exist}
was supposed to give: {"no": null, "exist": null}
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,19
The expression: foo.[bar]
was supposed to give: ["bar"]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,20
The expression: foo.[bar,baz]
was supposed to give: ["bar", "baz"]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,21
The expression: foo.[bar,qux]
was supposed to give: ["bar", "qux"]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,22
The expression: foo.[bar,noexist]
was supposed to give: ["bar", null]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,0,23
The expression: foo.[noexist,alsonoexist]
was supposed to give: [null, null]
for the JSON: {"foo": {"bar": "bar", "baz": "baz", "qux": "qux", "nested": {"one": {"a": "first", "b": "second", "c": "third"}, "two": {"a": "first", "b": "second", "c": "third"}, "three": {"a": "first", "b": "second", "c": {"inner": "third"}}}}, "bar": 1, "baz": 2, "qux\"": 3}
but instead gave: ""

FAIL multiselect,1,0
The expression: foo.{bar:bar,baz:baz}
was supposed to give: {"bar": 1, "baz": [2, 3, 4]}
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,1,1
The expression: foo.[bar,baz[0]]
was supposed to give: [1, 2]
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,1,2
The expression: foo.[bar,baz[1]]
was supposed to give: [1, 3]
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,1,3
The expression: foo.[bar,baz[2]]
was supposed to give: [1, 4]
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,1,4
The expression: foo.[bar,baz[3]]
was supposed to give: [1, null]
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,1,5
The expression: foo.[bar[0],baz[3]]
was supposed to give: [null, null]
for the JSON: {"foo": {"bar": 1, "baz": [2, 3, 4]}}
but instead gave: ""

FAIL multiselect,2,0
The expression: foo.{bar: bar, baz: baz}
was supposed to give: {"bar": 1, "baz": 2}
for the JSON: {"foo": {"bar": 1, "baz": 2}}
but instead gave: ""

FAIL multiselect,2,1
The expression: foo.[bar,baz]
was supposed to give: [1, 2]
for the JSON: {"foo": {"bar": 1, "baz": 2}}
but instead gave: ""

FAIL multiselect,3,0
The expression: foo.{bar: bar.baz[1],includeme: includeme}
was supposed to give: {"bar": {"common": "second", "two": 2}, "includeme": true}
for the JSON: {"foo": {"bar": {"baz": [{"common": "first", "one": 1}, {"common": "second", "two": 2}]}, "ignoreme": 1, "includeme": true}}
but instead gave: ""

FAIL multiselect,3,1
The expression: foo.{"bar.baz.two": bar.baz[1].two, includeme: includeme}
was supposed to give: {"bar.baz.two": 2, "includeme": true}
for the JSON: {"foo": {"bar": {"baz": [{"common": "first", "one": 1}, {"common": "second", "two": 2}]}, "ignoreme": 1, "includeme": true}}
but instead gave: ""

FAIL multiselect,3,2
The expression: foo.[includeme, bar.baz[*].common]
was supposed to give: [true, ["first", "second"]]
for the JSON: {"foo": {"bar": {"baz": [{"common": "first", "one": 1}, {"common": "second", "two": 2}]}, "ignoreme": 1, "includeme": true}}
but instead gave: ""

FAIL multiselect,3,3
The expression: foo.[includeme, bar.baz[*].none]
was supposed to give: [true, []]
for the JSON: {"foo": {"bar": {"baz": [{"common": "first", "one": 1}, {"common": "second", "two": 2}]}, "ignoreme": 1, "includeme": true}}
but instead gave: ""

FAIL multiselect,3,4
The expression: foo.[includeme, bar.baz[].common]
was supposed to give: [true, ["first", "second"]]
for the JSON: {"foo": {"bar": {"baz": [{"common": "first", "one": 1}, {"common": "second", "two": 2}]}, "ignoreme": 1, "includeme": true}}
but instead gave: ""

FAIL multiselect,4,0
The expression: reservations[*].instances[*].{id: id, name: name}
was supposed to give: [[{"id": "id1", "name": "first"}, {"id": "id2", "name": "second"}], [{"id": "id3", "name": "third"}, {"id": "id4", "name": "fourth"}]]
for the JSON: {"reservations": [{"instances": [{"id": "id1", "name": "first"}, {"id": "id2", "name": "second"}]}, {"instances": [{"id": "id3", "name": "third"}, {"id": "id4", "name": "fourth"}]}]}
but instead gave: ""

FAIL multiselect,4,1
The expression: reservations[].instances[].{id: id, name: name}
was supposed to give: [{"id": "id1", "name": "first"}, {"id": "id2", "name": "second"}, {"id": "id3", "name": "third"}, {"id": "id4", "name": "fourth"}]
for the JSON: {"reservations": [{"instances": [{"id": "id1", "name": "first"}, {"id": "id2", "name": "second"}]}, {"instances": [{"id": "id3", "name": "third"}, {"id": "id4", "name": "fourth"}]}]}
but instead gave: ""

FAIL multiselect,4,2
The expression: reservations[].instances[].[id, name]
was supposed to give: [["id1", "first"], ["id2", "second"], ["id3", "third"], ["id4", "fourth"]]
for the JSON: {"reservations": [{"instances": [{"id": "id1", "name": "first"}, {"id": "id2", "name": "second"}]}, {"instances": [{"id": "id3", "name": "third"}, {"id": "id4", "name": "fourth"}]}]}
but instead gave: ""
...
FAIL multiselect,5,3
The expression: foo[].bar[]
was supposed to give: [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}, {"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: [[{"baz": 1, "qux": 2}, {"baz": 3, "qux": 4}], [{"baz": 5, "qux": 6}, {"baz": 7, "qux": 8}]]

FAIL multiselect,5,4
The expression: foo[].bar[].[baz, qux]
was supposed to give: [[1, 2], [3, 4], [5, 6], [7, 8]]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: ""

FAIL multiselect,5,5
The expression: foo[].bar[].[baz]
was supposed to give: [[1], [3], [5], [7]]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: ""

FAIL multiselect,5,6
The expression: foo[].bar[].[baz, qux][]
was supposed to give: [1, 2, 3, 4, 5, 6, 7, 8]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: ""

FAIL multiselect,6,0
The expression: foo.[baz[*].bar, qux[0]]
was supposed to give: [["abc", "def"], "zero"]
for the JSON: {"foo": {"baz": [{"bar": "abc"}, {"bar": "def"}], "qux": ["zero"]}}
but instead gave: ""

FAIL multiselect,7,0
The expression: foo.[baz[*].[bar, boo], qux[0]]
was supposed to give: [[["a", "c"], ["d", "f"]], "zero"]
for the JSON: {"foo": {"baz": [{"bar": "a", "bam": "b", "boo": "c"}, {"bar": "d", "bam": "e", "boo": "f"}], "qux": ["zero"]}}
but instead gave: ""

FAIL multiselect,8,0
The expression: foo.[baz[*].not_there || baz[*].bar, qux[0]]
was supposed to give: [["a", "d"], "zero"]
for the JSON: {"foo": {"baz": [{"bar": "a", "bam": "b", "boo": "c"}, {"bar": "d", "bam": "e", "boo": "f"}], "qux": ["zero"]}}
but instead gave: ""

FAIL multiselect,9,0
The expression: [[*],*]
was supposed to give: [null, ["object"]]
for the JSON: {"type": "object"}
but instead gave: ""

FAIL multiselect,10,0
The expression: [[*]]
was supposed to give: [[]]
for the JSON: []
but instead gave: ""

FAIL multiselect,10,1
The expression: missing.{foo: bar}
was supposed to give: null
for the JSON: []
but instead gave: ""

FAIL filters,0,0
The expression: foo[?name == 'a']
was supposed to give: [{"name": "a"}]
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}]}
but instead gave: ""

FAIL filters,1,0
The expression: *[?[0] == `0`]
was supposed to give: [[], []]
for the JSON: {"foo": [0, 1], "bar": [2, 3]}
but instead gave: ""

FAIL filters,2,0
The expression: foo[?first == last]
was supposed to give: [{"first": "foo", "last": "foo"}]
for the JSON: {"foo": [{"first": "foo", "last": "bar"}, {"first": "foo", "last": "foo"}, {"first": "foo", "last": "baz"}]}
but instead gave: ""

FAIL filters,2,1
The expression: foo[?first == last].first
was supposed to give: ["foo"]
for the JSON: {"foo": [{"first": "foo", "last": "bar"}, {"first": "foo", "last": "foo"}, {"first": "foo", "last": "baz"}]}
but instead gave: ""

FAIL filters,3,0
The expression: foo[?age > `25`]
was supposed to give: [{"age": 30}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,1
The expression: foo[?age >= `25`]
was supposed to give: [{"age": 25}, {"age": 30}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,2
The expression: foo[?age > `30`]
was supposed to give: []
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,3
The expression: foo[?age < `25`]
was supposed to give: [{"age": 20}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,4
The expression: foo[?age <= `25`]
was supposed to give: [{"age": 20}, {"age": 25}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,5
The expression: foo[?age < `20`]
was supposed to give: []
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,6
The expression: foo[?age == `20`]
was supposed to give: [{"age": 20}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,3,7
The expression: foo[?age != `20`]
was supposed to give: [{"age": 25}, {"age": 30}]
for the JSON: {"foo": [{"age": 20}, {"age": 25}, {"age": 30}]}
but instead gave: ""

FAIL filters,4,0
The expression: foo[?weight > `44.4`]
was supposed to give: [{"weight": 55.5}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,1
The expression: foo[?weight >= `44.4`]
was supposed to give: [{"weight": 44.4}, {"weight": 55.5}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,2
The expression: foo[?weight > `55.5`]
was supposed to give: []
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,3
The expression: foo[?weight < `44.4`]
was supposed to give: [{"weight": 33.3}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,4
The expression: foo[?weight <= `44.4`]
was supposed to give: [{"weight": 33.3}, {"weight": 44.4}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,5
The expression: foo[?weight < `33.3`]
was supposed to give: []
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,6
The expression: foo[?weight == `33.3`]
was supposed to give: [{"weight": 33.3}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,4,7
The expression: foo[?weight != `33.3`]
was supposed to give: [{"weight": 44.4}, {"weight": 55.5}]
for the JSON: {"foo": [{"weight": 33.3}, {"weight": 44.4}, {"weight": 55.5}]}
but instead gave: ""

FAIL filters,5,0
The expression: foo[?top.name == 'a']
was supposed to give: [{"top": {"name": "a"}}]
for the JSON: {"foo": [{"top": {"name": "a"}}, {"top": {"name": "b"}}]}
but instead gave: ""

FAIL filters,6,0
The expression: foo[?top.first == top.last]
was supposed to give: [{"top": {"first": "foo", "last": "foo"}}]
for the JSON: {"foo": [{"top": {"first": "foo", "last": "bar"}}, {"top": {"first": "foo", "last": "foo"}}, {"top": {"first": "foo", "last": "baz"}}]}
but instead gave: ""

FAIL filters,6,1
The expression: foo[?top == `{"first": "foo", "last": "bar"}`]
was supposed to give: [{"top": {"first": "foo", "last": "bar"}}]
for the JSON: {"foo": [{"top": {"first": "foo", "last": "bar"}}, {"top": {"first": "foo", "last": "foo"}}, {"top": {"first": "foo", "last": "baz"}}]}
but instead gave: ""

FAIL filters,7,0
The expression: foo[?key == `true`]
was supposed to give: [{"key": true}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,1
The expression: foo[?key == `false`]
was supposed to give: [{"key": false}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,2
The expression: foo[?key == `0`]
was supposed to give: [{"key": 0}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,3
The expression: foo[?key == `1`]
was supposed to give: [{"key": 1}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,4
The expression: foo[?key == `[0]`]
was supposed to give: [{"key": [0]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,5
The expression: foo[?key == `{"bar": [0]}`]
was supposed to give: [{"key": {"bar": [0]}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,6
The expression: foo[?key == `null`]
was supposed to give: [{"key": null}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,7
The expression: foo[?key == `[1]`]
was supposed to give: [{"key": [1]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,8
The expression: foo[?key == `{"a":2}`]
was supposed to give: [{"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,9
The expression: foo[?`true` == key]
was supposed to give: [{"key": true}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,10
The expression: foo[?`false` == key]
was supposed to give: [{"key": false}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,11
The expression: foo[?`0` == key]
was supposed to give: [{"key": 0}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,12
The expression: foo[?`1` == key]
was supposed to give: [{"key": 1}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,13
The expression: foo[?`[0]` == key]
was supposed to give: [{"key": [0]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,14
The expression: foo[?`{"bar": [0]}` == key]
was supposed to give: [{"key": {"bar": [0]}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,15
The expression: foo[?`null` == key]
was supposed to give: [{"key": null}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,16
The expression: foo[?`[1]` == key]
was supposed to give: [{"key": [1]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,17
The expression: foo[?`{"a":2}` == key]
was supposed to give: [{"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,18
The expression: foo[?key != `true`]
was supposed to give: [{"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,19
The expression: foo[?key != `false`]
was supposed to give: [{"key": true}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,20
The expression: foo[?key != `0`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,21
The expression: foo[?key != `1`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,22
The expression: foo[?key != `null`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,23
The expression: foo[?key != `[1]`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,24
The expression: foo[?key != `{"a":2}`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,25
The expression: foo[?`true` != key]
was supposed to give: [{"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,26
The expression: foo[?`false` != key]
was supposed to give: [{"key": true}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,27
The expression: foo[?`0` != key]
was supposed to give: [{"key": true}, {"key": false}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,28
The expression: foo[?`1` != key]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,29
The expression: foo[?`null` != key]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,30
The expression: foo[?`[1]` != key]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,7,31
The expression: foo[?`{"a":2}` != key]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 1}, {"key": [0]}, {"key": {"bar": [0]}}, {"key": null}, {"key": [1]}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,0
The expression: foo[?key == `true`]
was supposed to give: [{"key": true}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,1
The expression: foo[?key == `false`]
was supposed to give: [{"key": false}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,2
The expression: foo[?key]
was supposed to give: [{"key": true}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,3
The expression: foo[? !key]
was supposed to give: [{"key": false}, {"key": null}, {"key": []}, {"key": {}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,4
The expression: foo[? !!key]
was supposed to give: [{"key": true}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": [1]}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,5
The expression: foo[? `true`]
was supposed to give: [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,8,6
The expression: foo[? `false`]
was supposed to give: []
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": 0}, {"key": 0.0}, {"key": 1}, {"key": 1.0}, {"key": [0]}, {"key": null}, {"key": [1]}, {"key": []}, {"key": {}}, {"key": {"a": 2}}]}
but instead gave: ""

FAIL filters,9,0
The expression: reservations[].instances[?bar==`1`]
was supposed to give: [[{"foo": 2, "bar": 1}]]
for the JSON: {"reservations": [{"instances": [{"foo": 1, "bar": 2}, {"foo": 1, "bar": 3}, {"foo": 1, "bar": 2}, {"foo": 2, "bar": 1}]}]}
but instead gave: ""

FAIL filters,9,1
The expression: reservations[*].instances[?bar==`1`]
was supposed to give: [[{"foo": 2, "bar": 1}]]
for the JSON: {"reservations": [{"instances": [{"foo": 1, "bar": 2}, {"foo": 1, "bar": 3}, {"foo": 1, "bar": 2}, {"foo": 2, "bar": 1}]}]}
but instead gave: ""

FAIL filters,9,2
The expression: reservations[].instances[?bar==`1`][]
was supposed to give: [{"foo": 2, "bar": 1}]
for the JSON: {"reservations": [{"instances": [{"foo": 1, "bar": 2}, {"foo": 1, "bar": 3}, {"foo": 1, "bar": 2}, {"foo": 2, "bar": 1}]}]}
but instead gave: ""

FAIL filters,10,0
The expression: foo[?bar==`1`].bar[0]
was supposed to give: []
for the JSON: {"baz": "other", "foo": [{"bar": 1}, {"bar": 2}, {"bar": 3}, {"bar": 4}, {"bar": 1, "baz": 2}]}
but instead gave: ""

FAIL filters,11,0
The expression: foo[?a==`1`].b.c
was supposed to give: ["x", "y", "z"]
for the JSON: {"foo": [{"a": 1, "b": {"c": "x"}}, {"a": 1, "b": {"c": "y"}}, {"a": 1, "b": {"c": "z"}}, {"a": 2, "b": {"c": "z"}}, {"a": 1, "baz": 2}]}
but instead gave: ""

FAIL filters,12,0
The expression: foo[?name == 'a' || name == 'b']
was supposed to give: [{"name": "a"}, {"name": "b"}]
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}, {"name": "c"}]}
but instead gave: ""

FAIL filters,12,1
The expression: foo[?name == 'a' || name == 'e']
was supposed to give: [{"name": "a"}]
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}, {"name": "c"}]}
but instead gave: ""

FAIL filters,12,2
The expression: foo[?name == 'a' || name == 'b' || name == 'c']
was supposed to give: [{"name": "a"}, {"name": "b"}, {"name": "c"}]
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}, {"name": "c"}]}
but instead gave: ""

FAIL filters,13,0
The expression: foo[?a == `1` && b == `2`]
was supposed to give: [{"a": 1, "b": 2}]
for the JSON: {"foo": [{"a": 1, "b": 2}, {"a": 1, "b": 3}]}
but instead gave: ""

FAIL filters,13,1
The expression: foo[?a == `1` && b == `4`]
was supposed to give: []
for the JSON: {"foo": [{"a": 1, "b": 2}, {"a": 1, "b": 3}]}
but instead gave: ""

FAIL filters,14,0
The expression: foo[?c == `3` || a == `1` && b == `4`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,1
The expression: foo[?b == `2` || a == `3` && b == `4`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,2
The expression: foo[?a == `3` && b == `4` || b == `2`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,3
The expression: foo[?(a == `3` && b == `4`) || b == `2`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,4
The expression: foo[?((a == `3` && b == `4`)) || b == `2`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,5
The expression: foo[?a == `3` && (b == `4` || b == `2`)]
was supposed to give: [{"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,14,6
The expression: foo[?a == `3` && ((b == `4` || b == `2`))]
was supposed to give: [{"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,15,0
The expression: foo[?a == `1` || b ==`2` && c == `5`]
was supposed to give: [{"a": 1, "b": 2, "c": 3}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,15,1
The expression: foo[?(a == `1` || b ==`2`) && c == `5`]
was supposed to give: []
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,15,2
The expression: foo[?!(a == `1` || b ==`2`)]
was supposed to give: [{"a": 3, "b": 4}]
for the JSON: {"foo": [{"a": 1, "b": 2, "c": 3}, {"a": 3, "b": 4}]}
but instead gave: ""

FAIL filters,16,0
The expression: foo[?key]
was supposed to give: [{"key": true}, {"key": [0]}, {"key": {"a": "b"}}, {"key": 0}, {"key": 1}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": []}, {"key": {}}, {"key": [0]}, {"key": {"a": "b"}}, {"key": 0}, {"key": 1}, {"key": null}, {"notkey": true}]}
but instead gave: ""

FAIL filters,16,1
The expression: foo[?!key]
was supposed to give: [{"key": false}, {"key": []}, {"key": {}}, {"key": null}, {"notkey": true}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": []}, {"key": {}}, {"key": [0]}, {"key": {"a": "b"}}, {"key": 0}, {"key": 1}, {"key": null}, {"notkey": true}]}
but instead gave: ""

FAIL filters,16,2
The expression: foo[?key == `null`]
was supposed to give: [{"key": null}, {"notkey": true}]
for the JSON: {"foo": [{"key": true}, {"key": false}, {"key": []}, {"key": {}}, {"key": [0]}, {"key": {"a": "b"}}, {"key": 0}, {"key": 1}, {"key": null}, {"notkey": true}]}
but instead gave: ""

FAIL filters,17,0
The expression: foo[?@ < `5`]
was supposed to give: [0, 1, 2, 3, 4]
for the JSON: {"foo": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}
but instead gave: ""

FAIL filters,17,1
The expression: foo[?`5` > @]
was supposed to give: [0, 1, 2, 3, 4]
for the JSON: {"foo": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}
but instead gave: ""

FAIL filters,17,2
The expression: foo[?@ == @]
was supposed to give: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
for the JSON: {"foo": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}
but instead gave: ""
.............
FAIL wildcard,3,3
The expression: *.*.foo[]
was supposed to give: ["one", "one"]
for the JSON: {"top1": {"sub1": {"foo": "one"}}, "top2": {"sub1": {"foo": "one"}}}
but instead gave: [[["o", "n", "e"]], [["o", "n", "e"]]]
.................
FAIL wildcard,8,0
The expression: foo[*].bar[*].kind
was supposed to give: [["basic", "intermediate"], ["advanced", "expert"]]
for the JSON: {"foo": [{"bar": [{"kind": "basic"}, {"kind": "intermediate"}]}, {"bar": [{"kind": "advanced"}, {"kind": "expert"}]}, {"bar": "string"}]}
but instead gave: ""
..................
FAIL wildcard,14,0
The expression: string[*]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: "string"

FAIL wildcard,14,1
The expression: hash[*]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: {"bar": "baz", "foo": "bar"}

FAIL wildcard,14,2
The expression: number[*]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: 23
.
FAIL wildcard,14,4
The expression: string[*].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""

FAIL wildcard,14,5
The expression: hash[*].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""

FAIL wildcard,14,6
The expression: number[*].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""
..........................
FAIL literal,0,18
The expression: `"foo\`bar"`
was supposed to give: "foo`bar"
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: ""
.
FAIL literal,0,20
The expression: `"1\`"`
was supposed to give: "1`"
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: ""

FAIL literal,0,21
The expression: `"\\"`.{a:`"b"`}
was supposed to give: {"a": "b"}
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: ""

FAIL literal,0,22
The expression: `{"a": "b"}`.a
was supposed to give: "b"
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: {"a": "b"}

FAIL literal,0,23
The expression: `{"a": {"b": "c"}}`.a.b
was supposed to give: "c"
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: {"a": {"b": "c"}}

FAIL literal,0,24
The expression: `[0, 1, 2]`[1]
was supposed to give: 1
for the JSON: {"foo": [{"name": "a"}, {"name": "b"}], "bar": {"baz": "qux"}}
but instead gave: [0, 1, 2]
..
FAIL literal,1,2
The expression: foo.`"bar"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

...........
FAIL literal,2,10
The expression: 'foo\'bar'
was supposed to give: "foo'bar"
for the JSON: {}
but instead gave: ""
...........................
FAIL indices,3,0
The expression: reservations[].instances[].foo
was supposed to give: [1, 2]
for the JSON: {"reservations": [{"instances": [{"foo": 1}, {"foo": 2}]}]}
but instead gave: [[1, 2]]

FAIL indices,3,1
The expression: reservations[].instances[].bar
was supposed to give: []
for the JSON: {"reservations": [{"instances": [{"foo": 1}, {"foo": 2}]}]}
but instead gave: [[]]
..
FAIL indices,4,0
The expression: reservations[].instances[].foo[].bar
was supposed to give: [1, 2, 4, 5, 6, 8]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[1, 2, 4], [5, 6, 8], []], []]

FAIL indices,4,1
The expression: reservations[].instances[].foo[].baz
was supposed to give: []
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[], [], []], []]

FAIL indices,4,2
The expression: reservations[].instances[].notfoo[].bar
was supposed to give: [20, 21, 22, 23, 24, 25]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[20, 21, 22]], [[23, 24, 25]]]

FAIL indices,4,3
The expression: reservations[].instances[].notfoo[].notbar
was supposed to give: [[7], [7]]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[[7]]], [[[7]]]]
.
FAIL indices,4,5
The expression: reservations[].instances[].foo[].notbar
was supposed to give: [3, [7]]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[3], [[7]], []], []]

FAIL indices,4,6
The expression: reservations[].instances[].bar[].baz
was supposed to give: [[1], [2], [3], [4]]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[[1], [2], [3], [4]]], []]

FAIL indices,4,7
The expression: reservations[].instances[].baz[].baz
was supposed to give: [[1, 2], [], [], [3, 4]]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[[1, 2], [], [], [3, 4]]], []]

FAIL indices,4,8
The expression: reservations[].instances[].qux[].baz
was supposed to give: [[], [1, 2, 3], [4], [], [], [1, 2, 3], [4], []]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[[], [1, 2, 3], [4], []]], [[[], [1, 2, 3], [4], []]]]

FAIL indices,4,9
The expression: reservations[].instances[].qux[].baz[]
was supposed to give: [1, 2, 3, 4, 1, 2, 3, 4]
for the JSON: {"reservations": [{"instances": [{"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"foo": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"foo": "bar"}, {"notfoo": [{"bar": 20}, {"bar": 21}, {"notbar": [7]}, {"bar": 22}]}, {"bar": [{"baz": [1]}, {"baz": [2]}, {"baz": [3]}, {"baz": [4]}]}, {"baz": [{"baz": [1, 2]}, {"baz": []}, {"baz": []}, {"baz": [3, 4]}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}, {"instances": [{"a": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}, {"b": [{"bar": 5}, {"bar": 6}, {"notbar": [7]}, {"bar": 8}]}, {"c": "bar"}, {"notfoo": [{"bar": 23}, {"bar": 24}, {"notbar": [7]}, {"bar": 25}]}, {"qux": [{"baz": []}, {"baz": [1, 2, 3]}, {"baz": [4]}, {"baz": []}]}], "otherkey": {"foo": [{"bar": 1}, {"bar": 2}, {"notbar": 3}, {"bar": 4}]}}]}
but instead gave: [[[[], [1, 2, 3], [4], []]], [[[], [1, 2, 3], [4], []]]]
.........
FAIL indices,6,3
The expression: foo[].bar[]
was supposed to give: [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}, {"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: [[{"baz": 1, "qux": 2}, {"baz": 3, "qux": 4}], [{"baz": 5, "qux": 6}, {"baz": 7, "qux": 8}]]

FAIL indices,6,4
The expression: foo[].bar[].baz
was supposed to give: [1, 3, 5, 7]
for the JSON: {"foo": [{"bar": [{"qux": 2, "baz": 1}, {"qux": 4, "baz": 3}]}, {"bar": [{"qux": 6, "baz": 5}, {"qux": 8, "baz": 7}]}]}
but instead gave: [[1, 3], [5, 7]]

FAIL indices,7,0
The expression: string[]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ["s", "t", "r", "i", "n", "g"]

FAIL indices,7,1
The expression: hash[]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""

FAIL indices,7,2
The expression: number[]
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""
.
FAIL indices,7,4
The expression: string[].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: []

FAIL indices,7,5
The expression: hash[].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""

FAIL indices,7,6
The expression: number[].foo
was supposed to give: null
for the JSON: {"string": "string", "hash": {"foo": "bar", "bar": "baz"}, "number": 23, "nullvalue": null}
but instead gave: ""
.........
FAIL functions,0,3
The expression: abs(array[1])
was supposed to give: 3
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,4
The expression: abs(array[1])
was supposed to give: 3
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..............
FAIL functions,0,19
The expression: ceil(decimals[0])
was supposed to give: 2
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,20
The expression: ceil(decimals[1])
was supposed to give: 2
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,21
The expression: ceil(decimals[2])
was supposed to give: -1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,23
The expression: contains('abc', 'a')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,24
The expression: contains('abc', 'd')
was supposed to give: false
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,26
The expression: contains(strings, 'a')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,27
The expression: contains(decimals, `1.2`)
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,28
The expression: contains(decimals, `false`)
was supposed to give: false
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,29
The expression: ends_with(str, 'r')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,30
The expression: ends_with(str, 'tr')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,31
The expression: ends_with(str, 'Str')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,32
The expression: ends_with(str, 'SStr')
was supposed to give: false
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,33
The expression: ends_with(str, 'foo')
was supposed to give: false
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
...
FAIL functions,0,37
The expression: floor(decimals[0])
was supposed to give: 1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
....
FAIL functions,0,42
The expression: length('')
was supposed to give: 0
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,44
The expression: length(strings[0])
was supposed to give: 1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.....
FAIL functions,0,50
The expression: length(strings[0])
was supposed to give: 1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,53
The expression: max(strings)
was supposed to give: "c"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
...
FAIL functions,0,57
The expression: max(empty_list)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,58
The expression: merge(`{}`)
was supposed to give: {}
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,59
The expression: merge(`{}`, `{}`)
was supposed to give: {}
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,60
The expression: merge(`{"a": 1}`, `{"b": 2}`)
was supposed to give: {"a": 1, "b": 2}
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,61
The expression: merge(`{"a": 1}`, `{"a": 2}`)
was supposed to give: {"a": 2}
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,62
The expression: merge(`{"a": 1, "b": 2}`, `{"a": 2, "c": 3}`, `{"d": 4}`)
was supposed to give: {"a": 2, "b": 2, "c": 3, "d": 4}
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,63
The expression: min(numbers)
was supposed to give: -1
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,64
The expression: min(decimals)
was supposed to give: -1.5
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,67
The expression: min(empty_list)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,68
The expression: min(decimals)
was supposed to give: -1.5
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,69
The expression: min(strings)
was supposed to give: "a"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.........
FAIL functions,0,79
The expression: sort(keys(objects))
was supposed to give: ["bar", "foo"]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
...
FAIL functions,0,83
The expression: sort(values(objects))
was supposed to give: ["bar", "baz"]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,86
The expression: join(', ', strings)
was supposed to give: "a, b, c"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,87
The expression: join(', ', strings)
was supposed to give: "a, b, c"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,88
The expression: join(',', `["a", "b"]`)
was supposed to give: "a,b"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,91
The expression: join('|', strings)
was supposed to give: "a|b|c"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,94
The expression: join('|', decimals[].to_string(@))
was supposed to give: "1.01|1.2|-1.5"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
......
FAIL functions,0,101
The expression: starts_with(str, 'S')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,102
The expression: starts_with(str, 'St')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,103
The expression: starts_with(str, 'Str')
was supposed to give: true
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,104
The expression: starts_with(str, 'String')
was supposed to give: false
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,106
The expression: sum(numbers)
was supposed to give: 11
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,107
The expression: sum(decimals)
was supposed to give: 0.71
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,109
The expression: sum(array[].to_number(@))
was supposed to give: 111
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,110
The expression: sum(`[]`)
was supposed to give: 0
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.....
FAIL functions,0,116
The expression: to_string('foo')
was supposed to give: "foo"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,117
The expression: to_string(`1.2`)
was supposed to give: "1.2"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,118
The expression: to_string(`[0, 1]`)
was supposed to give: "[0,1]"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
....
FAIL functions,0,123
The expression: to_number('notanumber')
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.....
FAIL functions,0,129
The expression: sort(numbers)
was supposed to give: [-1, 3, 4, 5]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,130
The expression: sort(strings)
was supposed to give: ["a", "b", "c"]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,131
The expression: sort(decimals)
was supposed to give: [-1.5, 1.01, 1.2]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
..
FAIL functions,0,134
The expression: sort(empty_list)
was supposed to give: []
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""
.
FAIL functions,0,136
The expression: not_null(unknown_key, str)
was supposed to give: "Str"
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,137
The expression: not_null(unknown_key, foo.bar, empty_list, str)
was supposed to give: []
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,138
The expression: not_null(unknown_key, null_key, empty_list, str)
was supposed to give: []
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,139
The expression: not_null(all, expressions, are_null)
was supposed to give: null
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,140
The expression: not_null()
was supposed to have non zero for error error: invalid-arity
but instead gave rc of: 0, stderr: 

.
FAIL functions,0,141
The expression: numbers[].to_string(@)
was supposed to give: ["-1", "3", "4", "5"]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,0,142
The expression: array[].to_number(@)
was supposed to give: [-1, 3, 4, 5, 100]
for the JSON: {"foo": -1, "zero": 0, "numbers": [-1, 3, 4, 5], "array": [-1, 3, 4, 5, "a", "100"], "strings": ["a", "b", "c"], "decimals": [1.01, 1.2, -1.5], "str": "Str", "false": false, "empty_list": [], "empty_hash": {}, "objects": {"foo": "bar", "bar": "baz"}, "null_key": null}
but instead gave: ""

FAIL functions,1,0
The expression: foo[].not_null(f, e, d, c, b, a)
was supposed to give: ["b", "c", "d", "e", "f"]
for the JSON: {"foo": [{"b": "b", "a": "a"}, {"c": "c", "b": "b"}, {"d": "d", "c": "c"}, {"e": "e", "d": "d"}, {"f": "f", "e": "e"}]}
but instead gave: ""

FAIL functions,2,0
The expression: sort_by(people, &age)
was supposed to give: [{"age": 10, "age_str": "10", "bool": true, "name": 3}, {"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}]
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,1
The expression: sort_by(people, &age_str)
was supposed to give: [{"age": 10, "age_str": "10", "bool": true, "name": 3}, {"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}]
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,2
The expression: sort_by(people, &to_number(age_str))
was supposed to give: [{"age": 10, "age_str": "10", "bool": true, "name": 3}, {"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}]
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,3
The expression: sort_by(people, &age)[].name
was supposed to give: [3, "a", "c", "b", "d"]
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""
....
FAIL functions,2,8
The expression: sort_by(people, &age)[].extra
was supposed to give: ["foo", "bar"]
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,9
The expression: sort_by(`[]`, &age)
was supposed to give: []
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,10
The expression: max_by(people, &age)
was supposed to give: {"age": 50, "age_str": "50", "bool": false, "name": "d"}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,11
The expression: max_by(people, &age_str)
was supposed to give: {"age": 50, "age_str": "50", "bool": false, "name": "d"}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""
..
FAIL functions,2,14
The expression: max_by(people, &to_number(age_str))
was supposed to give: {"age": 50, "age_str": "50", "bool": false, "name": "d"}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,15
The expression: max_by(`[]`, &age)
was supposed to give: null
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,16
The expression: min_by(people, &age)
was supposed to give: {"age": 10, "age_str": "10", "bool": true, "name": 3}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,17
The expression: min_by(people, &age_str)
was supposed to give: {"age": 10, "age_str": "10", "bool": true, "name": 3}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""
..
FAIL functions,2,20
The expression: min_by(people, &to_number(age_str))
was supposed to give: {"age": 10, "age_str": "10", "bool": true, "name": 3}
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,2,21
The expression: min_by(`[]`, &age)
was supposed to give: null
for the JSON: {"people": [{"age": 20, "age_str": "20", "bool": true, "name": "a", "extra": "foo"}, {"age": 40, "age_str": "40", "bool": false, "name": "b", "extra": "bar"}, {"age": 30, "age_str": "30", "bool": true, "name": "c"}, {"age": 50, "age_str": "50", "bool": false, "name": "d"}, {"age": 10, "age_str": "10", "bool": true, "name": 3}]}
but instead gave: ""

FAIL functions,3,0
The expression: sort_by(people, &age)
was supposed to give: [{"age": 10, "order": "1"}, {"age": 10, "order": "2"}, {"age": 10, "order": "3"}, {"age": 10, "order": "4"}, {"age": 10, "order": "5"}, {"age": 10, "order": "6"}, {"age": 10, "order": "7"}, {"age": 10, "order": "8"}, {"age": 10, "order": "9"}, {"age": 10, "order": "10"}, {"age": 10, "order": "11"}]
for the JSON: {"people": [{"age": 10, "order": "1"}, {"age": 10, "order": "2"}, {"age": 10, "order": "3"}, {"age": 10, "order": "4"}, {"age": 10, "order": "5"}, {"age": 10, "order": "6"}, {"age": 10, "order": "7"}, {"age": 10, "order": "8"}, {"age": 10, "order": "9"}, {"age": 10, "order": "10"}, {"age": 10, "order": "11"}]}
but instead gave: ""

FAIL functions,4,0
The expression: map(&a, people)
was supposed to give: [10, 10, 10, 10, 10, 10, 10, 10, 10]
for the JSON: {"people": [{"a": 10, "b": 1, "c": "z"}, {"a": 10, "b": 2, "c": null}, {"a": 10, "b": 3}, {"a": 10, "b": 4, "c": "z"}, {"a": 10, "b": 5, "c": null}, {"a": 10, "b": 6}, {"a": 10, "b": 7, "c": "z"}, {"a": 10, "b": 8, "c": null}, {"a": 10, "b": 9}], "empty": []}
but instead gave: ""

FAIL functions,4,1
The expression: map(&c, people)
was supposed to give: ["z", null, null, "z", null, null, "z", null, null]
for the JSON: {"people": [{"a": 10, "b": 1, "c": "z"}, {"a": 10, "b": 2, "c": null}, {"a": 10, "b": 3}, {"a": 10, "b": 4, "c": "z"}, {"a": 10, "b": 5, "c": null}, {"a": 10, "b": 6}, {"a": 10, "b": 7, "c": "z"}, {"a": 10, "b": 8, "c": null}, {"a": 10, "b": 9}], "empty": []}
but instead gave: ""
.
FAIL functions,4,3
The expression: map(&foo, empty)
was supposed to give: []
for the JSON: {"people": [{"a": 10, "b": 1, "c": "z"}, {"a": 10, "b": 2, "c": null}, {"a": 10, "b": 3}, {"a": 10, "b": 4, "c": "z"}, {"a": 10, "b": 5, "c": null}, {"a": 10, "b": 6}, {"a": 10, "b": 7, "c": "z"}, {"a": 10, "b": 8, "c": null}, {"a": 10, "b": 9}], "empty": []}
but instead gave: ""

FAIL functions,5,0
The expression: map(&foo.bar, array)
was supposed to give: ["yes1", "yes2", null]
for the JSON: {"array": [{"foo": {"bar": "yes1"}}, {"foo": {"bar": "yes2"}}, {"foo1": {"bar": "no"}}]}
but instead gave: ""

FAIL functions,5,1
The expression: map(&foo1.bar, array)
was supposed to give: [null, null, "no"]
for the JSON: {"array": [{"foo": {"bar": "yes1"}}, {"foo": {"bar": "yes2"}}, {"foo1": {"bar": "no"}}]}
but instead gave: ""

FAIL functions,5,2
The expression: map(&foo.bar.baz, array)
was supposed to give: [null, null, null]
for the JSON: {"array": [{"foo": {"bar": "yes1"}}, {"foo": {"bar": "yes2"}}, {"foo1": {"bar": "no"}}]}
but instead gave: ""

FAIL functions,6,0
The expression: map(&[], array)
was supposed to give: [[1, 2, 3, 4], [5, 6, 7, 8, 9]]
for the JSON: {"array": [[1, 2, 3, [4]], [5, 6, 7, [8, 9]]]}
but instead gave: ""
..
FAIL benchmarks,0,2
The expression: a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: max stack frames exceeded.
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:26:54-57	thunk <index>
	std.jsonnet:197:14-19	thunk <a>
	std.jsonnet:197:14-27	function <anonymous>
	std.jsonnet:197:14-27	object <invar>
	std.jsonnet:208:12-23	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:26:43-59	thunk <remainder>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-28	thunk <a>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	object <first>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:288:57-72	thunk <expression>
	...
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:(558:5)-(562:6)	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:5-52	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:15-46	thunk <x>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:48	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:20:22-46	thunk <compiled>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:21:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	

..
FAIL benchmarks,1,0
The expression: a && b && c && d && e && f && g && h && i && j && k && l && m && n && o && p && q && r && s && t && u && v && w && x && y && z
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: max stack frames exceeded.
	std.jsonnet:197:14-27	function <anonymous>
	std.jsonnet:197:14-27	object <invar>
	std.jsonnet:208:12-23	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:26:43-59	thunk <remainder>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-28	thunk <a>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	object <first>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:288:57-72	thunk <expression>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:245:38-48	thunk <expression>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:212:38-48	thunk <expression>
	...
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:(558:5)-(562:6)	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:5-52	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:15-46	thunk <x>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:48	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:20:22-46	thunk <compiled>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:21:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,1,1
The expression: z || y || x || w || v || u || t || s || r || q || p || o || n || m || l || k || j || i || h || g || f || e || d || c || b || a
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: max stack frames exceeded.
	std.jsonnet:197:14-27	function <anonymous>
	std.jsonnet:197:14-27	object <invar>
	std.jsonnet:208:12-23	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:26:43-59	thunk <remainder>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-28	thunk <a>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	object <first>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:288:57-72	thunk <expression>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:245:38-48	thunk <expression>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:212:38-48	thunk <expression>
	...
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:(558:5)-(562:6)	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:5-52	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:15-46	thunk <x>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:48	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:20:22-46	thunk <compiled>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:21:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,1,2
The expression: sum([z, y, x, w, v, u, t, s, r, q, p, o, n, m, l, k, j, i, h, g, f, e, d, c, b, a])
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: Unhandled expression: "([z, y, x, w, v, u, t, s, r, q, p, o, n, m, l, k, j, i, h, g, f, e, d, c, b, a])"
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:224:10-79	function <alltokens>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:24-45	thunk <tokens>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:560:7-13	thunk <arr>
	std.jsonnet:790:15-18	thunk <arr>
	std.jsonnet:786:28-31	
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:(558:5)-(562:6)	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:5-52	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:15-46	thunk <x>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:48	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:20:22-46	thunk <compiled>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:21:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,1,3
The expression: sum([z, sum([y, sum([x, sum([w, sum([v, sum([u, sum([t, sum([s, sum([r, sum([q, sum([p, sum([o, sum([n, sum([m, sum([l, sum([k, sum([j, sum([i, sum([h, sum([g, sum([f, sum([e, sum([d, sum([c, sum([b, a])])])])])])])])])])])])])])])])])])])])])])])])])
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: Unhandled expression: "([z, sum([y, sum([x, sum([w, sum([v, sum([u, sum([t, sum([s, sum([r, sum([q, sum([p, sum([o, sum([n, sum([m, sum([l, sum([k, sum([j, sum([i, sum([h, sum([g, sum([f, sum([e, sum([d, sum([c, sum([b, a])])])])])])])])])])])])])])])])])])])])])])])])])"
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:224:10-79	function <alltokens>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:24-45	thunk <tokens>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:560:7-13	thunk <arr>
	std.jsonnet:790:15-18	thunk <arr>
	std.jsonnet:786:28-31	
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:(558:5)-(562:6)	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:5-52	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:15-46	thunk <x>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:48	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:20:22-46	thunk <compiled>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:21:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,1,4
The expression: [z, y, x, w, v, u, t, s, r, q, p, o, n, m, l, k, j, i, h, g, f, e, d, c, b, a]
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: Unhandled expression: "[z, y, x, w, v, u, t, s, r, q, p, o, n, m, l, k, j, i, h, g, f, e, d, c, b, a]"
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:224:10-79	function <alltokens>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:24-45	thunk <tokens>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:560:7-13	thunk <arr>
	std.jsonnet:790:15-18	thunk <arr>
	std.jsonnet:786:28-31	
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:(558:5)-(562:6)	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:5-52	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:15-46	thunk <x>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:48	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:20:22-46	thunk <compiled>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:21:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,2,0
The expression: j49.j48.j47.j46.j45.j44.j43.j42.j41.j40.j39.j38.j37.j36.j35.j34.j33.j32.j31.j30.j29.j28.j27.j26.j25.j24.j23.j22.j21.j20.j19.j18.j17.j16.j15.j14.j13.j12.j11.j10.j9.j8.j7.j6.j5.j4.j3.j2.j1.j0
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: max stack frames exceeded.
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:26:54-57	thunk <index>
	std.jsonnet:197:14-19	thunk <a>
	std.jsonnet:197:14-27	function <anonymous>
	std.jsonnet:197:14-27	object <invar>
	std.jsonnet:208:12-23	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:26:43-59	thunk <remainder>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-28	thunk <a>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	object <first>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:288:57-72	thunk <expression>
	...
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:(558:5)-(562:6)	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:5-52	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:15-46	thunk <x>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:48	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:20:22-46	thunk <compiled>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:21:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	


FAIL benchmarks,2,1
The expression: j49|j48|j47|j46|j45|j44|j43|j42|j41|j40|j39|j38|j37|j36|j35|j34|j33|j32|j31|j30|j29|j28|j27|j26|j25|j24|j23|j22|j21|j20|j19|j18|j17|j16|j15|j14|j13|j12|j11|j10|j9|j8|j7|j6|j5|j4|j3|j2|j1|j0
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: max stack frames exceeded.
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:214:23-33	thunk <curTokens>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:216:27-36	thunk <content>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:20:16-23	object <second>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:303:36-50	thunk <content>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:20:16-23	object <token>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:559:46-59	thunk <content>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:279:42-49	thunk <tokens>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:560:7-13	thunk <arr>
	std.jsonnet:790:15-18	thunk <arr>
	std.jsonnet:786:28-31	
	...
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:51:10-24	thunk <a>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:51:10-36	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:51:10-36	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:47:23-46	thunk <result>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:44:46-52	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:47:7-53	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:267:7-37	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:21:5-32	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	

..
FAIL benchmarks,2,4
The expression: a[*].b[*].c[*].d[*].e[*].f[*].g[*].h[*].i[*].j[*].k[*].l[*].m[*].n[*].o[*].p[*].q[*].r[*].s[*].t[*].u[*].v[*].w[*].x[*].y[*].z[*].a[*].b[*].c[*].d[*].e[*].f[*].g[*].h[*].i[*].j[*].k[*].l[*].m[*].n[*].o[*].p[*].q[*].r[*].s[*].t[*].u[*].v[*].w[*].x[*].y[*].z[*].a[*].b[*].c[*].d[*].e[*].f[*].g[*].h[*].i[*].j[*].k[*].l[*].m[*].n[*].o[*].p[*].q[*].r[*].s[*].t[*].u[*].v[*].w[*].x[*].y[*].z[*].a[*].b[*].c[*].d[*].e[*].f[*].g[*].h[*].i[*].j[*].k[*].l[*].m[*].n[*].o[*].p[*].q[*].r[*].s[*].t[*].u[*].v[*].w[*].x[*].y[*].z[*]
was supposed to have a zero RC for test type 'bench',
but instead gave rc of: 1, stderr: 
RUNTIME ERROR: max stack frames exceeded.
		thunk <remainder>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-28	thunk <a>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:22:19-34	object <first>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:288:57-72	thunk <expression>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:310:30-40	thunk <expression>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:287:33-43	thunk <expression>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:260:36-46	thunk <expression>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:250:31-41	thunk <expr>
	/home/abentley/hacking/jmespath-jsonnet/src/tokens.libsonnet:138:46-50	thunk <expression>
	...
	std.jsonnet:786:17-32	function <aux>
	std.jsonnet:790:5-28	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:(558:5)-(562:6)	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/expr_factory.libsonnet:553:5-52	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:15-46	thunk <x>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:33:48	function <anonymous>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:20:22-46	thunk <compiled>
	/home/abentley/hacking/jmespath-jsonnet/src/jmespath.libsonnet:21:5-13	function <anonymous>
	<cmdline>:2:30-56	function <top_level>
	Top-level function	

..............................................
FAIL identifiers,45,0
The expression: "\f󥌳"
was supposed to give: true
for the JSON: {"\f\udb54\udf33": true}
but instead gave: ""
........
FAIL identifiers,54,0
The expression: "\\󞢤S"
was supposed to give: true
for the JSON: {"\\\udb3a\udca4S": true}
but instead gave: ""
........................
FAIL identifiers,79,0
The expression: "󇟇\\ueFAc"
was supposed to give: true
for the JSON: {"\udadd\udfc7\\ueFAc": true}
but instead gave: ""
...
FAIL identifiers,83,0
The expression: "􃰂"
was supposed to give: true
for the JSON: {"\udbcf\udc02": true}
but instead gave: ""
..
FAIL identifiers,86,0
The expression: "󵅁"
was supposed to give: true
for the JSON: {"\udb94\udd41": true}
but instead gave: ""
...............
FAIL identifiers,102,0
The expression: "\b%\"򞄏"
was supposed to give: true
for the JSON: {"\b%\"\uda38\udd0f": true}
but instead gave: ""
.......
FAIL identifiers,110,0
The expression: "!\b\n󑩒\"\""
was supposed to give: true
for the JSON: {"!\b\n\udb06\ude52\"\"": true}
but instead gave: ""
...................
FAIL pipe,0,5
The expression: {"a": foo.bar, "b": foo.other} | *.baz
was supposed to give: ["subkey", "subkey"]
for the JSON: {"foo": {"bar": {"baz": "subkey"}, "other": {"baz": "subkey"}, "other2": {"baz": "subkey"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["a", "b", "c"]}}}
but instead gave: ""
.....
FAIL pipe,1,5
The expression: [foo.bar, foo.other] | [0]
was supposed to give: {"baz": "one"}
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: ""

FAIL pipe,1,6
The expression: {"a": foo.bar, "b": foo.other} | a
was supposed to give: {"baz": "one"}
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: ""

FAIL pipe,1,7
The expression: {"a": foo.bar, "b": foo.other} | b
was supposed to give: {"baz": "two"}
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: ""

FAIL pipe,1,8
The expression: foo.bam || foo.bar | baz
was supposed to give: "one"
for the JSON: {"foo": {"bar": {"baz": "one"}, "other": {"baz": "two"}, "other2": {"baz": "three"}, "other3": {"notbaz": ["a", "b", "c"]}, "other4": {"notbaz": ["d", "e", "f"]}}}
but instead gave: null
...................
FAIL syntax,0,6
The expression: foo..bar
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

...............................
FAIL syntax,5,8
The expression: foo[*]*
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,6,0
The expression: []
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
.
FAIL syntax,7,1
The expression: [*]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: {"type": "object"}

FAIL syntax,7,2
The expression: *.[0]
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,7,3
The expression: *.["0"]
was supposed to give: [[null]]
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,7,4
The expression: [*].bar
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,7,5
The expression: [*][0]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
........
FAIL syntax,9,2
The expression: foo.[0]
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

..........
FAIL syntax,9,12
The expression: foo.[abc]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,9,13
The expression: foo.[abc, def]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
..................
FAIL syntax,10,14
The expression: a.{foo: bar}
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,10,15
The expression: a.{foo: bar, baz: bam}
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
....
FAIL syntax,10,20
The expression: {"\\":{" ":*}}
was supposed to give: {"\\": {" ": ["object"]}}
for the JSON: {"type": "object"}
but instead gave: ""
...
FAIL syntax,11,2
The expression: foo.|| bar
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

...
FAIL syntax,11,5
The expression: foo.[a || b]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
..
FAIL syntax,12,0
The expression: foo[?bar==`"baz"`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,12,1
The expression: foo[? bar == `"baz"` ]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
.....
FAIL syntax,12,7
The expression: foo[?a.b.c==d.e.f]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,12,8
The expression: foo[?bar==`[0, 1, 2]`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,12,9
The expression: foo[?bar==`["a", "b", "c"]`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
.
FAIL syntax,12,11
The expression: foo[?bar==`["foo\`bar"]`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""
...
FAIL syntax,12,15
The expression: [?"\\">`"foo"`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,12,16
The expression: [?"\\" > `"foo"`]
was supposed to give: null
for the JSON: {"type": "object"}
but instead gave: ""

FAIL syntax,13,0
The expression: bar.`"anything"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,1
The expression: bar.baz.noexists.`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,2
The expression: foo[*].`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,3
The expression: foo[*].name.`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,4
The expression: foo[].name.`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,5
The expression: foo[].name.`"literal"`.`"subliteral"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,6
The expression: foo[*].name.noexist.`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,7
The expression: foo[].name.noexist.`"literal"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,8
The expression: twolen[*].`"foo"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,9
The expression: twolen[*].threelen[*].`"bar"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

.
FAIL syntax,13,10
The expression: twolen[].threelen[].`"bar"`
was supposed to have non zero for error error: syntax
but instead gave rc of: 0, stderr: 

........
FAIL syntax,15,2
The expression: [*.*]
was supposed to give: [null]
for the JSON: []
but instead gave: ""
.............................................
FAIL boolean,0,4
The expression: outer.bad || outer.foo
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bar": "bar", "baz": "baz"}}
but instead gave: null

FAIL boolean,0,5
The expression: outer.bad||outer.foo
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bar": "bar", "baz": "baz"}}
but instead gave: null
....
FAIL boolean,1,0
The expression: outer.empty_string || outer.foo
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bool": false, "empty_list": [], "empty_string": ""}}
but instead gave: null

FAIL boolean,1,1
The expression: outer.nokey || outer.bool || outer.empty_list || outer.empty_string || outer.foo
was supposed to give: "foo"
for the JSON: {"outer": {"foo": "foo", "bool": false, "empty_list": [], "empty_string": ""}}
but instead gave: null
..................
FAIL boolean,2,18
The expression: (Number || True) && False
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""

FAIL boolean,2,19
The expression: Number || (True && False)
was supposed to give: 5
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""
.......
FAIL boolean,2,27
The expression: !True && False
was supposed to give: false
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: true

FAIL boolean,2,28
The expression: !(True && False)
was supposed to give: true
for the JSON: {"True": true, "False": false, "Number": 5, "EmptyList": [], "Zero": 0, "ZeroFloat": 0.0}
but instead gave: ""
...............
FAIL boolean,3,11
The expression: one < two && three > one
was supposed to give: true
for the JSON: {"one": 1, "two": 2, "three": 3, "emptylist": [], "boolvalue": false}
but instead gave: null
.....................
FAIL
